// Generated by Haxe 4.1.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["sdd"] = $hx_exports["sdd"] || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Math.__name__ = "Math";
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var sdd_Representation = function(label,detail,mediaObjects) {
	this.mediaObjects = [];
	this.label = label;
	this.detail = detail;
	if(mediaObjects != null) {
		this.mediaObjects = mediaObjects;
	}
};
sdd_Representation.__name__ = "sdd.Representation";
sdd_Representation.prototype = {
	__class__: sdd_Representation
};
var sdd_Character = function(id,representation,statesIds) {
	this.children = [];
	this.inapplicableStatesIds = [];
	sdd_Representation.call(this);
	if(representation != null) {
		var s = representation.label;
		if(!(s == null || s == "")) {
			this.label = representation.label;
		}
		var s = representation.detail;
		if(!(s == null || s == "")) {
			this.detail = representation.detail;
		}
		if(representation.mediaObjects != null && representation.mediaObjects.length > 0) {
			this.mediaObjects = representation.mediaObjects;
		}
	}
	this.id = id;
	this.statesIds = statesIds;
};
sdd_Character.__name__ = "sdd.Character";
sdd_Character.__super__ = sdd_Representation;
sdd_Character.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_Character
});
var sdd_Dataset = function(taxons,characters,states) {
	this.taxons = taxons;
	this.characters = characters;
	this.states = states;
};
sdd_Dataset.__name__ = "sdd.Dataset";
sdd_Dataset.prototype = {
	__class__: sdd_Dataset
};
var sdd_TaxonHierarchy = function(taxon,childrenHierarchyIds) {
	this.taxon = taxon;
	this.childrenHierarchyIds = childrenHierarchyIds;
};
sdd_TaxonHierarchy.__name__ = "sdd.TaxonHierarchy";
sdd_TaxonHierarchy.prototype = {
	__class__: sdd_TaxonHierarchy
};
var sdd_CharactersAndStatesById = function(charactersById,statesById) {
	this.charactersById = charactersById;
	this.statesById = statesById;
};
sdd_CharactersAndStatesById.__name__ = "sdd.CharactersAndStatesById";
sdd_CharactersAndStatesById.prototype = {
	__class__: sdd_CharactersAndStatesById
};
var sdd_Loader = $hx_exports["sdd"]["Loader"] = function() {
};
sdd_Loader.__name__ = "sdd.Loader";
sdd_Loader.assertNotNull = function(value,exception) {
	if(value == null) {
		throw haxe_Exception.thrown(exception);
	}
	return value;
};
sdd_Loader.prototype = {
	loadDataset: function(datasetElement) {
		var mediaObjectsById = this.loadMediaObjects(datasetElement);
		var charsAndStatesById = this.loadDatasetCharacters(datasetElement,mediaObjectsById);
		return new sdd_Dataset(Lambda.array(this.loadDatasetTaxons(datasetElement,mediaObjectsById,charsAndStatesById.charactersById)),Lambda.array(charsAndStatesById.charactersById),Lambda.array(charsAndStatesById.statesById));
	}
	,loadMediaObjects: function(datasetElement) {
		var mediaObjectsElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"MediaObjects");
		var mediaObjectsById = new haxe_ds_StringMap();
		if(mediaObjectsElement == null) {
			return mediaObjectsById;
		}
		var mediaObjectElement = mediaObjectsElement.elementsNamed("MediaObject");
		while(mediaObjectElement.hasNext()) {
			var mediaObjectElement1 = mediaObjectElement.next();
			var sourceElement = sdd_XmlExtensions.firstElementNamed(mediaObjectElement1,"Source");
			if(sourceElement != null) {
				var id = mediaObjectElement1.get("id");
				var representation = this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(mediaObjectElement1,"Representation"),mediaObjectsById);
				if(id == null) {
					throw new haxe_Exception("Invalid SDD: a MediaObject declaration misses its 'id'.");
				}
				var key = mediaObjectElement1.get("id");
				var value = new sdd_MediaObject(sourceElement.get("href"),representation.detail);
				mediaObjectsById.h[key] = value;
			}
		}
		return mediaObjectsById;
	}
	,loadRepresentation: function(representationElement,mediaObjectsByRef) {
		if(representationElement == null) {
			return new sdd_Representation("","",[]);
		}
		var mediaObjects = [];
		var mediaObjectElement = representationElement.elementsNamed("MediaObject");
		while(mediaObjectElement.hasNext()) {
			var mediaObjectElement1 = mediaObjectElement.next();
			var key = mediaObjectElement1.get("ref");
			var mediaObject = mediaObjectsByRef.h[key];
			if(mediaObject != null) {
				mediaObjects.push(mediaObject);
			}
		}
		var labelNode = sdd_XmlExtensions.firstElementNamed(representationElement,"Label");
		var detailElement = sdd_XmlExtensions.firstElementNamed(representationElement,"Detail");
		return new sdd_Representation(labelNode != null ? sdd_XmlExtensions.innerText(labelNode) : "_",detailElement != null ? sdd_XmlExtensions.innerText(detailElement) : "_",mediaObjects);
	}
	,loadDatasetTaxons: function(datasetElement,mediaObjectsById,charactersById) {
		var taxonsById = new haxe_ds_StringMap();
		var taxonNamesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"TaxonNames");
		if(taxonNamesElement == null) {
			return new haxe_ds_StringMap();
		}
		var taxonElement = taxonNamesElement.elementsNamed("TaxonName");
		while(taxonElement.hasNext()) {
			var taxonElement1 = taxonElement.next();
			var value = taxonElement1.get("id");
			var exception = new sdd_SddException("A Taxon is missing its 'id'.");
			if(value == null) {
				throw haxe_Exception.thrown(exception);
			}
			var taxonId = value;
			var value1 = new sdd_Taxon(taxonId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(taxonElement1,"Representation"),mediaObjectsById));
			taxonsById.h[taxonId] = value1;
		}
		var codedDescriptionsElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"CodedDescriptions");
		if(codedDescriptionsElement != null) {
			var codedDescriptionElement = codedDescriptionsElement.elementsNamed("CodedDescription");
			while(codedDescriptionElement.hasNext()) {
				var codedDescriptionElement1 = codedDescriptionElement.next();
				var value = sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"Scope");
				var exception = new sdd_SddException("A CodedDescription is missing its 'Scope'.");
				if(value == null) {
					throw haxe_Exception.thrown(exception);
				}
				var scopeElement = value;
				var value1 = sdd_XmlExtensions.firstElementNamed(scopeElement,"TaxonName");
				var exception1 = new sdd_SddException("A CodedDescription Scope doesn't have a 'Taxon' element, which is the only one supported by this loader.");
				if(value1 == null) {
					throw haxe_Exception.thrown(exception1);
				}
				var taxonNameElement = value1;
				var value2 = taxonNameElement.get("ref");
				var exception2 = new sdd_SddException("A TaxonName is missing its 'ref'.");
				if(value2 == null) {
					throw haxe_Exception.thrown(exception2);
				}
				var taxonId = value2;
				var representation = this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"Representation"),mediaObjectsById);
				var value3 = taxonsById.h[taxonId];
				var exception3 = new sdd_SddRefException("Scope > TaxonName","Taxon",taxonId);
				if(value3 == null) {
					throw haxe_Exception.thrown(exception3);
				}
				var taxonToAugment = value3;
				if(representation != null) {
					var s = representation.label;
					if(!(s == null || s == "")) {
						taxonToAugment.label = representation.label;
					}
					var s1 = representation.detail;
					if(!(s1 == null || s1 == "")) {
						taxonToAugment.detail = representation.detail;
					}
					if(representation.mediaObjects != null && representation.mediaObjects.length > 0) {
						taxonToAugment.mediaObjects = representation.mediaObjects;
					}
				}
				var summaryDataElement = sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"SummaryData");
				if(summaryDataElement != null) {
					var categoricalElements = summaryDataElement.elementsNamed("Categorical");
					var categoricalElement = categoricalElements;
					while(categoricalElement.hasNext()) {
						var categoricalElement1 = categoricalElement.next();
						var stateElement = categoricalElement1.elementsNamed("State");
						while(stateElement.hasNext()) {
							var stateElement1 = stateElement.next();
							var value4 = stateElement1.get("ref");
							var exception4 = new sdd_SddException("A State is missing its 'ref'.");
							if(value4 == null) {
								throw haxe_Exception.thrown(exception4);
							}
							var stateId = value4;
							taxonToAugment.selectedStatesIds.push(stateId);
						}
					}
				}
			}
		}
		var taxonHierarchiesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"TaxonHierarchies");
		var taxonHierarchyElement = taxonHierarchiesElement != null ? sdd_XmlExtensions.firstElementNamed(taxonHierarchiesElement,"TaxonHierarchy") : null;
		var nodesElement = taxonHierarchyElement != null ? sdd_XmlExtensions.firstElementNamed(taxonHierarchyElement,"Nodes") : null;
		if(nodesElement != null) {
			var hierarchiesById_h = Object.create(null);
			var nodeElement = nodesElement.elementsNamed("Node");
			while(nodeElement.hasNext()) {
				var nodeElement1 = nodeElement.next();
				var value = nodeElement1.get("id");
				var exception = new sdd_SddException("A TaxonHierarchy > Nodes > Node is missing its 'id'.");
				if(value == null) {
					throw haxe_Exception.thrown(exception);
				}
				var hierarchyId = value;
				var value1 = sdd_XmlExtensions.firstElementNamed(nodeElement1,"TaxonName");
				var exception1 = new sdd_SddException("A TaxonHierarchy > Nodes > Node is missing its 'TaxonName'.");
				if(value1 == null) {
					throw haxe_Exception.thrown(exception1);
				}
				var taxonNameElement = value1;
				var value2 = taxonNameElement.get("ref");
				var exception2 = new sdd_SddException("A TaxonHierarchy > Nodes > Node > TaxonName is missing its 'ref'.");
				if(value2 == null) {
					throw haxe_Exception.thrown(exception2);
				}
				var taxonId = value2;
				var value3 = taxonsById.h[taxonId];
				var exception3 = new sdd_SddRefException("TaxonHierarchy > Nodes > Node > TaxonName","Taxons",taxonId);
				if(value3 == null) {
					throw haxe_Exception.thrown(exception3);
				}
				var taxon = value3;
				var hierarchy = hierarchiesById_h[hierarchyId];
				if(hierarchy == null) {
					hierarchy = new sdd_TaxonHierarchy(taxon,[]);
				} else {
					hierarchy.taxon = taxon;
				}
				hierarchiesById_h[hierarchyId] = hierarchy;
				var parentElement = sdd_XmlExtensions.firstElementNamed(nodeElement1,"Parent");
				if(parentElement != null) {
					var value4 = parentElement.get("ref");
					var exception4 = new sdd_SddException("A TaxonHierarchy >> Parent is missing its 'ref'.");
					if(value4 == null) {
						throw haxe_Exception.thrown(exception4);
					}
					var parentId = value4;
					var parent = hierarchiesById_h[parentId];
					if(parent == null) {
						parent = new sdd_TaxonHierarchy(null,[hierarchyId]);
						hierarchiesById_h[parentId] = parent;
					} else {
						parent.childrenHierarchyIds.push(hierarchyId);
					}
				}
			}
			var hierarchy = haxe_ds_StringMap.valueIterator(hierarchiesById_h);
			while(hierarchy.hasNext()) {
				var hierarchy1 = hierarchy.next();
				var augmentedTaxon = hierarchy1.taxon;
				var _g = 0;
				var _g1 = hierarchy1.childrenHierarchyIds;
				while(_g < _g1.length) {
					var hid = _g1[_g];
					++_g;
					var child = hierarchiesById_h[hid].taxon;
					child.parentId = augmentedTaxon.id;
					augmentedTaxon.children.push(child);
				}
			}
		}
		return taxonsById;
	}
	,loadDatasetCharacters: function(datasetElement,mediaObjectsById) {
		var charactersById = new haxe_ds_StringMap();
		var charactersElements = sdd_XmlExtensions.firstElementNamed(datasetElement,"Characters");
		var statesById = new haxe_ds_StringMap();
		if(charactersElements == null) {
			return new sdd_CharactersAndStatesById(charactersById,statesById);
		}
		var characterElement = charactersElements.elements();
		while(characterElement.hasNext()) {
			var characterElement1 = characterElement.next();
			var tmp;
			if(characterElement1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (characterElement1.nodeType == null ? "null" : XmlType.toString(characterElement1.nodeType)));
			}
			if(characterElement1.nodeName != "CategoricalCharacter") {
				if(characterElement1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (characterElement1.nodeType == null ? "null" : XmlType.toString(characterElement1.nodeType)));
				}
				tmp = characterElement1.nodeName != "QuantitativeCharacter";
			} else {
				tmp = false;
			}
			if(tmp) {
				continue;
			}
			var value = characterElement1.get("id");
			var exception = new sdd_SddException("A Character is missing its 'id'.");
			if(value == null) {
				throw haxe_Exception.thrown(exception);
			}
			var characterId = value;
			var statesElement = sdd_XmlExtensions.firstElementNamed(characterElement1,"States");
			var statesIds = [];
			if(statesElement != null) {
				var stateElement = statesElement.elementsNamed("StateDefinition");
				while(stateElement.hasNext()) {
					var stateElement1 = stateElement.next();
					var value1 = stateElement1.get("id");
					var exception1 = new sdd_SddException("A State is missing its 'id'");
					if(value1 == null) {
						throw haxe_Exception.thrown(exception1);
					}
					var stateId = value1;
					var state = new sdd_State(stateId,characterId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(stateElement1,"Representation"),mediaObjectsById));
					statesById.h[stateId] = state;
					statesIds.push(stateId);
				}
			}
			var value2 = new sdd_Character(characterId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(characterElement1,"Representation"),mediaObjectsById),statesIds);
			charactersById.h[characterId] = value2;
		}
		var characterTreesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"CharacterTrees");
		if(characterTreesElement != null) {
			var characterTreeElement = characterTreesElement.elementsNamed("CharacterTree");
			while(characterTreeElement.hasNext()) {
				var characterTreeElement1 = characterTreeElement.next();
				var nodesElement = sdd_XmlExtensions.firstElementNamed(characterTreeElement1,"Nodes");
				if(nodesElement != null) {
					var charNodeElement = nodesElement.elementsNamed("CharNode");
					while(charNodeElement.hasNext()) {
						var charNodeElement1 = charNodeElement.next();
						var value = sdd_XmlExtensions.firstElementNamed(charNodeElement1,"Character");
						var exception = new sdd_SddException("A CharNode is missing its 'Character'.");
						if(value == null) {
							throw haxe_Exception.thrown(exception);
						}
						var characterElement = value;
						var value1 = characterElement.get("ref");
						var exception1 = new sdd_SddException("A CharNode > Character is missing its 'ref.");
						if(value1 == null) {
							throw haxe_Exception.thrown(exception1);
						}
						var characterRef = value1;
						var value2 = charactersById.h[characterRef];
						var exception2 = new sdd_SddRefException("CharNode > Character","Character",characterRef);
						if(value2 == null) {
							throw haxe_Exception.thrown(exception2);
						}
						var augmentedCharacter = value2;
						var dependencyRulesElement = sdd_XmlExtensions.firstElementNamed(charNodeElement1,"DependencyRules");
						if(dependencyRulesElement != null) {
							var inapplicableIfElement = sdd_XmlExtensions.firstElementNamed(dependencyRulesElement,"InapplicableIf");
							if(inapplicableIfElement != null) {
								var stateElement = inapplicableIfElement.elementsNamed("State");
								while(stateElement.hasNext()) {
									var stateElement1 = stateElement.next();
									var value3 = stateElement1.get("ref");
									var exception3 = new sdd_SddException("A InapplicableIf > State is missing its 'ref'.");
									if(value3 == null) {
										throw haxe_Exception.thrown(exception3);
									}
									var stateRef = value3;
									var value4 = statesById.h[stateRef];
									var exception4 = new sdd_SddRefException("InapplicableIf > State","State",stateRef);
									if(value4 == null) {
										throw haxe_Exception.thrown(exception4);
									}
									var state = value4;
									augmentedCharacter.inapplicableStatesIds.push(state.id);
									augmentedCharacter.parentId = state.characterId;
								}
							}
						}
						if(augmentedCharacter.inapplicableStatesIds.length > 0) {
							charactersById.h[augmentedCharacter.parentId].children.push(augmentedCharacter);
						}
					}
				}
			}
		}
		return new sdd_CharactersAndStatesById(charactersById,statesById);
	}
	,load: function(text) {
		var xml = Xml.parse(text);
		var datasetsElements = xml.firstElement();
		var datasets = [];
		if(datasetsElements.nodeType != Xml.Document && datasetsElements.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (datasetsElements.nodeType == null ? "null" : XmlType.toString(datasetsElements.nodeType)));
		}
		var _g_current = 0;
		var _g_array = datasetsElements.children;
		while(_g_current < _g_array.length) {
			var datasetElement = _g_array[_g_current++];
			datasets.push(this.loadDataset(datasetElement));
		}
		return datasets;
	}
	,__class__: sdd_Loader
};
var sdd_MediaObject = function(source,detail) {
	this.source = source;
	this.detail = detail;
};
sdd_MediaObject.__name__ = "sdd.MediaObject";
sdd_MediaObject.prototype = {
	__class__: sdd_MediaObject
};
var sdd_SddException = function(message) {
	haxe_Exception.call(this,"Invalid SDD: " + message);
};
sdd_SddException.__name__ = "sdd.SddException";
sdd_SddException.__super__ = haxe_Exception;
sdd_SddException.prototype = $extend(haxe_Exception.prototype,{
	__class__: sdd_SddException
});
var sdd_SddRefException = function(sourceElement,targetElement,ref) {
	sdd_SddException.call(this,"A '" + sourceElement + "' references a missing '" + targetElement + "': " + ref);
};
sdd_SddRefException.__name__ = "sdd.SddRefException";
sdd_SddRefException.__super__ = sdd_SddException;
sdd_SddRefException.prototype = $extend(sdd_SddException.prototype,{
	__class__: sdd_SddRefException
});
var sdd_State = function(id,characterId,representation) {
	sdd_Representation.call(this);
	this.id = id;
	this.characterId = characterId;
	if(representation != null) {
		var s = representation.label;
		if(!(s == null || s == "")) {
			this.label = representation.label;
		}
		var s = representation.detail;
		if(!(s == null || s == "")) {
			this.detail = representation.detail;
		}
		if(representation.mediaObjects != null && representation.mediaObjects.length > 0) {
			this.mediaObjects = representation.mediaObjects;
		}
	}
};
sdd_State.__name__ = "sdd.State";
sdd_State.__super__ = sdd_Representation;
sdd_State.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_State
});
var sdd_Taxon = function(id,representation) {
	this.children = [];
	this.selectedStatesIds = [];
	sdd_Representation.call(this);
	this.id = id;
	if(representation != null) {
		var s = representation.label;
		if(!(s == null || s == "")) {
			this.label = representation.label;
		}
		var s = representation.detail;
		if(!(s == null || s == "")) {
			this.detail = representation.detail;
		}
		if(representation.mediaObjects != null && representation.mediaObjects.length > 0) {
			this.mediaObjects = representation.mediaObjects;
		}
	}
};
sdd_Taxon.__name__ = "sdd.Taxon";
sdd_Taxon.__super__ = sdd_Representation;
sdd_Taxon.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_Taxon
});
var sdd_XmlExtensions = function() { };
sdd_XmlExtensions.__name__ = "sdd.XmlExtensions";
sdd_XmlExtensions.firstElementNamed = function(xml,tagName) {
	if(xml != null) {
		return xml.elementsNamed(tagName).next();
	} else {
		return null;
	}
};
sdd_XmlExtensions.innerText = function(xml) {
	if(xml == null) {
		return "";
	}
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var textNode = xml.children[0];
	if(textNode != null) {
		if(textNode.nodeType == Xml.Document || textNode.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (textNode.nodeType == null ? "null" : XmlType.toString(textNode.nodeType)));
		}
		return textNode.nodeValue;
	} else {
		return "";
	}
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=SDD.js.map