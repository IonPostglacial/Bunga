// Generated by Haxe 4.1.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["bunga"] = $hx_exports["bunga"] || {};
$hx_exports["sdd"] = $hx_exports["sdd"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var bunga_Book = $hx_exports["bunga"]["Book"] = function(id,label) {
	this.id = id;
	this.label = label;
};
bunga_Book.__name__ = "bunga.Book";
bunga_Book.prototype = {
	__class__: bunga_Book
};
var bunga_BookInfo = function(fasc,page,detail) {
	this.fasc = fasc;
	this.page = page;
	this.detail = detail;
};
bunga_BookInfo.__name__ = "bunga.BookInfo";
bunga_BookInfo.prototype = {
	__class__: bunga_BookInfo
};
var bunga_DetailData = $hx_exports["bunga"]["DetailData"] = function(name,author,nameCN,fasc,page,detail,photos,fields,name2,vernacularName,vernacularName2,meaning,noHerbier,website,herbariumPicture,extra) {
	this.name = name != null ? StringTools.trim(name) : "";
	this.author = author != null ? StringTools.trim(author) : "";
	this.nameCN = nameCN != null ? StringTools.trim(nameCN) : "";
	this.name2 = name2;
	this.vernacularName = vernacularName;
	this.vernacularName2 = vernacularName2;
	this.meaning = meaning;
	this.herbariumPicture = herbariumPicture;
	this.website = website;
	this.fasc = fasc;
	this.page = page;
	this.detail = detail != null ? detail : "";
	this.photos = photos != null ? photos : [];
	this.extra = extra;
};
bunga_DetailData.__name__ = "bunga.DetailData";
bunga_DetailData.findInDescription = function(description,section) {
	var re = new EReg("" + bunga_ERegTools.escape(section) + "\\s*:\\s*(.*?)(?=<br><br>)","i");
	if(re.match(description)) {
		return StringTools.trim(re.matched(1));
	} else {
		return "";
	}
};
bunga_DetailData.removeFromDescription = function(description,sections) {
	var desc = description;
	var _g = 0;
	while(_g < sections.length) {
		var section = sections[_g];
		++_g;
		var re_r = new RegExp("" + bunga_ERegTools.escape(section) + "\\s*:\\s*(.*?)(?=<br><br>)","i".split("u").join(""));
		desc = desc.replace(re_r,"");
	}
	return desc;
};
bunga_DetailData.fromRepresentation = function(representation,extraFields,photosByRef) {
	var names = representation.label.split("/");
	var name = names[0];
	var author = names[1];
	var nameCN = names[2];
	var fields = bunga_Field.standard.concat(extraFields);
	var floreRe = new EReg("Flore Madagascar et Comores\\s*<br>\\s*fasc\\s+(\\d*)\\s*<br>\\s*page\\s+(null|\\d*)","i");
	var fasc = null;
	var page = null;
	if(floreRe.match(representation.detail)) {
		fasc = Std.parseInt(floreRe.matched(1));
		page = Std.parseInt(floreRe.matched(2));
	}
	var representation1 = representation.detail;
	var result = new Array(fields.length);
	var _g = 0;
	var _g1 = fields.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = fields[i].label;
	}
	var detail = bunga_DetailData.removeFromDescription(representation1,result).replace(floreRe.r,"");
	var emptyParagraphRe = new EReg("<p>(\n|\t|\\s|<br>|&nbsp;)*</p>","gi");
	if(emptyParagraphRe.match(detail)) {
		detail = detail.replace(emptyParagraphRe.r,"");
	}
	var _this = representation.mediaObjectsRefs;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = photosByRef[_this[i].ref];
	}
	var photos = result;
	var data = new bunga_DetailData(name,author,nameCN,fasc,page,detail,photos,extraFields,null,null,null,null,null,null,null,null);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		(field.std ? data : data.extra)[field.id] = bunga_DetailData.findInDescription(representation.detail,field.label);
	}
	return data;
};
bunga_DetailData.prototype = {
	toRepresentation: function(extraFields) {
		var _gthis = this;
		var _g = this.name + (this.author != null ? " / " + this.author : "" + (this.nameCN != null ? " / " + this.nameCN : ""));
		var result = new Array(extraFields.length);
		var _g1 = 0;
		var _g2 = extraFields.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var field = extraFields[i];
			var value = Reflect.field(field.std ? _gthis : _gthis.extra,field.id);
			result[i] = value == null || value == "" ? "" : "" + field.label + ": " + value + "<br><br>";
		}
		return new sdd_Representation(_g,"" + result.join("") + (this.fasc != null ? "Flore Madagascar et Comores<br>fasc " + this.fasc + "<br>page " + this.page + "<br><br>" : "" + this.detail),null);
	}
	,__class__: bunga_DetailData
};
var bunga_Item = function(id,data) {
	bunga_DetailData.call(this,data.name,data.author,data.nameCN,data.fasc,data.page,data.detail,data.photos,null,data.name2,data.vernacularName,data.vernacularName2,data.meaning,data.noHerbier,data.website,data.herbariumPicture,data.extra);
	this.id = id;
};
bunga_Item.__name__ = "bunga.Item";
bunga_Item.__super__ = bunga_DetailData;
bunga_Item.prototype = $extend(bunga_DetailData.prototype,{
	__class__: bunga_Item
});
var bunga_HierarchicalItem = function(type,id,hid,parentId,topLevel,childrenIds,data) {
	bunga_Item.call(this,id,data);
	this.type = type;
	this.hid = hid;
	this.parentId = parentId;
	this.topLevel = topLevel;
	this.children = { };
	var _g = 0;
	while(_g < childrenIds.length) {
		var id = childrenIds[_g];
		++_g;
		this.children[id] = null;
	}
};
bunga_HierarchicalItem.__name__ = "bunga.HierarchicalItem";
bunga_HierarchicalItem.__super__ = bunga_Item;
bunga_HierarchicalItem.prototype = $extend(bunga_Item.prototype,{
	hydrateChildren: function(hierarchyById) {
		var _g = 0;
		var _g1 = Reflect.fields(this.children);
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			var child = hierarchyById[id];
			if(child == null) {
				Reflect.deleteField(this.children,id);
				console.log("src/bunga/HierarchicalItem.hx:25:","Child not found: " + this.name + " > " + id);
			} else {
				this.children[id] = hierarchyById[id];
			}
		}
	}
	,__class__: bunga_HierarchicalItem
});
var bunga_Character = function(item,states,inapplicableStates) {
	bunga_HierarchicalItem.call(this,"character",item.id,item.hid,item.parentId,item.topLevel,Reflect.fields(item.children),item);
	this.states = states;
	this.inapplicableStates = inapplicableStates;
};
bunga_Character.__name__ = "bunga.Character";
bunga_Character.fromSdd = function(character,photosByRef,statesById) {
	var _g = character.id;
	var _g1 = character.id;
	var _g2 = character.parentId;
	var _g3 = character.parentId == null;
	var _g4 = character.childrenIds;
	var extraFields = [];
	var photosByRef1 = photosByRef;
	var names = character.label.split("/");
	var name = names[0];
	var author = names[1];
	var nameCN = names[2];
	var fields = bunga_Field.standard.concat(extraFields);
	var floreRe = new EReg("Flore Madagascar et Comores\\s*<br>\\s*fasc\\s+(\\d*)\\s*<br>\\s*page\\s+(null|\\d*)","i");
	var fasc = null;
	var page = null;
	if(floreRe.match(character.detail)) {
		fasc = Std.parseInt(floreRe.matched(1));
		page = Std.parseInt(floreRe.matched(2));
	}
	var character1 = character.detail;
	var result = new Array(fields.length);
	var _g5 = 0;
	var _g6 = fields.length;
	while(_g5 < _g6) {
		var i = _g5++;
		result[i] = fields[i].label;
	}
	var detail = bunga_DetailData.removeFromDescription(character1,result).replace(floreRe.r,"");
	var emptyParagraphRe = new EReg("<p>(\n|\t|\\s|<br>|&nbsp;)*</p>","gi");
	if(emptyParagraphRe.match(detail)) {
		detail = detail.replace(emptyParagraphRe.r,"");
	}
	var _this = character.mediaObjectsRefs;
	var result = new Array(_this.length);
	var _g5 = 0;
	var _g6 = _this.length;
	while(_g5 < _g6) {
		var i = _g5++;
		result[i] = photosByRef1[_this[i].ref];
	}
	var photos = result;
	var data = new bunga_DetailData(name,author,nameCN,fasc,page,detail,photos,extraFields,null,null,null,null,null,null,null,null);
	var _g5 = 0;
	while(_g5 < fields.length) {
		var field = fields[_g5];
		++_g5;
		(field.std ? data : data.extra)[field.id] = bunga_DetailData.findInDescription(character.detail,field.label);
	}
	var _g5 = new bunga_HierarchicalItem("character",_g,_g1,_g2,_g3,_g4,data);
	var _this = character.states;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = statesById[_this[i].id];
	}
	var _g = result;
	var _this = character.inapplicableStatesRefs;
	var result = new Array(_this.length);
	var _g1 = 0;
	var _g2 = _this.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = statesById[_this[i].ref];
	}
	return new bunga_Character(_g5,_g,result);
};
bunga_Character.__super__ = bunga_HierarchicalItem;
bunga_Character.prototype = $extend(bunga_HierarchicalItem.prototype,{
	__class__: bunga_Character
});
var bunga_CodedHierarchicalItem = function(item) {
	this.children = [];
	bunga_Item.call(this,item.id,new bunga_DetailData(item.name,item.author,item.nameCN,item.fasc,item.page,item.detail,item.photos,null,item.name2,item.vernacularName,item.vernacularName2,item.meaning,item.noHerbier,item.website,item.herbariumPicture,item.extra));
	this.type = item.type;
	this.hid = item.hid;
	this.parentId = item.parentId;
	this.topLevel = item.topLevel;
	var access = item.children;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var child = _g_access[_g_keys[_g_index++]];
		if(child == null) {
			console.log("src/bunga/Codec.hx:21:",item.name + " has null child");
			console.log("src/bunga/Codec.hx:22:",item);
		} else {
			this.children.push(child.id);
		}
	}
};
bunga_CodedHierarchicalItem.__name__ = "bunga.CodedHierarchicalItem";
bunga_CodedHierarchicalItem.__super__ = bunga_Item;
bunga_CodedHierarchicalItem.prototype = $extend(bunga_Item.prototype,{
	__class__: bunga_CodedHierarchicalItem
});
var bunga_CodedDescription = function(descriptorId,statesIds) {
	this.descriptorId = descriptorId;
	this.statesIds = statesIds;
};
bunga_CodedDescription.__name__ = "bunga.CodedDescription";
bunga_CodedDescription.prototype = {
	__class__: bunga_CodedDescription
};
var bunga_CodedTaxon = function(taxon) {
	this.bookInfoByIds = { };
	bunga_CodedHierarchicalItem.call(this,taxon);
	this.bookInfoByIds = taxon.bookInfoByIds;
	var _this = taxon.descriptions;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var d = _this[i];
		var d1 = d.descriptor.id;
		var _this1 = d.states;
		var result1 = new Array(_this1.length);
		var _g2 = 0;
		var _g3 = _this1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			result1[i1] = _this1[i1].id;
		}
		result[i] = new bunga_CodedDescription(d1,result1);
	}
	this.descriptions = result;
};
bunga_CodedTaxon.__name__ = "bunga.CodedTaxon";
bunga_CodedTaxon.__super__ = bunga_CodedHierarchicalItem;
bunga_CodedTaxon.prototype = $extend(bunga_CodedHierarchicalItem.prototype,{
	__class__: bunga_CodedTaxon
});
var bunga_CodedCharacter = function(character) {
	bunga_CodedHierarchicalItem.call(this,character);
	var _this = character.states;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i].id;
	}
	this.states = result;
	var _this = character.inapplicableStates;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i].id;
	}
	this.inapplicableStatesIds = result;
};
bunga_CodedCharacter.__name__ = "bunga.CodedCharacter";
bunga_CodedCharacter.__super__ = bunga_CodedHierarchicalItem;
bunga_CodedCharacter.prototype = $extend(bunga_CodedHierarchicalItem.prototype,{
	__class__: bunga_CodedCharacter
});
var bunga_CodedDataset = function(dataset) {
	var _g = [];
	var access = dataset.items;
	var _g1_access = access;
	var _g1_keys = Reflect.fields(access);
	var _g1_index = 0;
	while(_g1_index < _g1_keys.length) {
		var taxon = _g1_access[_g1_keys[_g1_index++]];
		_g.push(new bunga_CodedTaxon(taxon));
	}
	this.taxons = _g;
	var _g = [];
	var access = dataset.descriptors;
	var _g3_access = access;
	var _g3_keys = Reflect.fields(access);
	var _g3_index = 0;
	while(_g3_index < _g3_keys.length) {
		var character = _g3_access[_g3_keys[_g3_index++]];
		_g.push(new bunga_CodedCharacter(character));
	}
	this.descriptors = _g;
	this.states = bunga_CodedDataset.getAllStates(dataset);
};
bunga_CodedDataset.__name__ = "bunga.CodedDataset";
bunga_CodedDataset.getAllStates = function(dataset) {
	var states = [];
	var access = dataset.descriptors;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var character = _g_access[_g_keys[_g_index++]];
		states = states.concat(character.states);
	}
	return states;
};
bunga_CodedDataset.prototype = {
	__class__: bunga_CodedDataset
};
var bunga_Codec = $hx_exports["bunga"]["Codec"] = function() { };
bunga_Codec.__name__ = "bunga.Codec";
bunga_Codec.decodeHierarchicalItem = function(item) {
	var item1 = new bunga_HierarchicalItem(item.type,item.id,item.hid,item.parentId,item.topLevel,item.children,item);
	return item1;
};
bunga_Codec.decodeTaxon = function(taxon,descriptions,states,books) {
	var bookInfoByIds = taxon.bookInfoByIds != null ? taxon.bookInfoByIds : { };
	if(Reflect.fields(bookInfoByIds).length == 0) {
		var _g = 0;
		var _g1 = bunga_Book.standard;
		while(_g < _g1.length) {
			var book = _g1[_g];
			++_g;
			var info = new bunga_BookInfo(book.id == "fmc" ? "" + taxon.fasc : "",book.id == "fmc" ? taxon.page : null,"");
			bookInfoByIds[book.id] = info;
		}
	}
	var _g = bunga_Codec.decodeHierarchicalItem(taxon);
	var _g1 = bookInfoByIds;
	var _this = taxon.descriptions;
	var result = new Array(_this.length);
	var _g2 = 0;
	var _g3 = _this.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var d = _this[i];
		var _g4 = descriptions[d.descriptorId];
		var _this1 = d.statesIds;
		var result1 = new Array(_this1.length);
		var _g5 = 0;
		var _g6 = _this1.length;
		while(_g5 < _g6) {
			var i1 = _g5++;
			result1[i1] = states[_this1[i1]];
		}
		result[i] = new bunga_Description(_g4,result1);
	}
	return new bunga_Taxon(_g,result,_g1);
};
bunga_Codec.decodeCharacter = function(character,states) {
	var _g = bunga_Codec.decodeHierarchicalItem(character);
	var _this = character.states;
	var result = new Array(_this.length);
	var _g1 = 0;
	var _g2 = _this.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = states[_this[i]];
	}
	var _g1 = result;
	var tmp;
	if(character.inapplicableStates != null) {
		var _this = character.inapplicableStates;
		var result = new Array(_this.length);
		var _g2 = 0;
		var _g3 = _this.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = states[_this[i].id];
		}
		tmp = result;
	} else {
		var _this = character.inapplicableStatesIds;
		var result = new Array(_this.length);
		var _g2 = 0;
		var _g3 = _this.length;
		while(_g2 < _g3) {
			var i = _g2++;
			result[i] = states[_this[i]];
		}
		tmp = result;
	}
	return new bunga_Character(_g,_g1,tmp);
};
bunga_Codec.encodeDataset = function(dataset) {
	return new bunga_CodedDataset(dataset);
};
bunga_Codec.decodeDataset = function(dataset) {
	var states = { };
	var descriptors = { };
	var items = { };
	var _g = [];
	var _g1 = 0;
	var _g2 = bunga_Book.standard;
	while(_g1 < _g2.length) {
		var book = _g2[_g1];
		++_g1;
		_g.push(book);
	}
	var books = _g;
	var _g = 0;
	var _g1 = dataset.states;
	while(_g < _g1.length) {
		var state = _g1[_g];
		++_g;
		states[state.id] = state;
	}
	var _g = 0;
	var _g1 = dataset.descriptors;
	while(_g < _g1.length) {
		var descriptor = _g1[_g];
		++_g;
		descriptors[descriptor.id] = bunga_Codec.decodeCharacter(descriptor,states);
	}
	var _g = 0;
	var _g1 = dataset.taxons;
	while(_g < _g1.length) {
		var taxon = _g1[_g];
		++_g;
		items[taxon.id] = bunga_Codec.decodeTaxon(taxon,descriptors,states,books);
	}
	var access = descriptors;
	var _g9_access = access;
	var _g9_keys = Reflect.fields(access);
	var _g9_index = 0;
	while(_g9_index < _g9_keys.length) {
		var descriptor = _g9_access[_g9_keys[_g9_index++]];
		descriptor.hydrateChildren(descriptors);
	}
	var access = items;
	var _g10_access = access;
	var _g10_keys = Reflect.fields(access);
	var _g10_index = 0;
	while(_g10_index < _g10_keys.length) {
		var item = _g10_access[_g10_keys[_g10_index++]];
		item.hydrateChildren(items);
	}
	return new bunga_Dataset(items,descriptors,books);
};
var bunga_Dataset = $hx_exports["bunga"]["Dataset"] = function(items,descriptors,books) {
	bunga_DetailData.call(this);
	this.items = items;
	this.descriptors = descriptors;
	var tmp;
	if(books != null) {
		tmp = books;
	} else {
		var _g = [];
		var _g1 = 0;
		var _g2 = bunga_Book.standard;
		while(_g1 < _g2.length) {
			var book = _g2[_g1];
			++_g1;
			_g.push(book);
		}
		tmp = _g;
	}
	this.books = tmp;
};
bunga_Dataset.__name__ = "bunga.Dataset";
bunga_Dataset.extractStatesById = function(sddContent,photosByRef) {
	var statesById = { };
	var _g = 0;
	var _g1 = sddContent.states;
	while(_g < _g1.length) {
		var state = _g1[_g];
		++_g;
		statesById[state.id] = bunga_State.fromSdd(state,photosByRef);
	}
	return statesById;
};
bunga_Dataset.extractItemsById = function(sddContent,descriptors,extraFields,statesById,photosByRef) {
	var itemsById = { };
	var _g = 0;
	var _g1 = sddContent.taxons;
	while(_g < _g1.length) {
		var taxon = _g1[_g];
		++_g;
		itemsById[taxon.id] = bunga_Taxon.fromSdd(taxon,extraFields,photosByRef,descriptors,statesById);
	}
	return itemsById;
};
bunga_Dataset.extractDescriptorsById = function(sddContent,statesById,photosByRef) {
	var descriptorsById = { };
	var _g = 0;
	var _g1 = sddContent.characters;
	while(_g < _g1.length) {
		var character = _g1[_g];
		++_g;
		descriptorsById[character.id] = bunga_Character.fromSdd(character,photosByRef,statesById);
	}
	return descriptorsById;
};
bunga_Dataset.extractPhotosByRef = function(sddContent) {
	var photosByRef = { };
	var _g = 0;
	var _g1 = sddContent.mediaObjects;
	while(_g < _g1.length) {
		var mediaObject = _g1[_g];
		++_g;
		photosByRef[mediaObject.id] = mediaObject.source;
	}
	return photosByRef;
};
bunga_Dataset.fromSdd = function(dataset,extraFields) {
	var photosByRef = bunga_Dataset.extractPhotosByRef(dataset);
	var statesById = bunga_Dataset.extractStatesById(dataset,photosByRef);
	var descriptors = bunga_Dataset.extractDescriptorsById(dataset,statesById,photosByRef);
	var access = descriptors;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var descriptor = _g_access[_g_keys[_g_index++]];
		descriptor.hydrateChildren(descriptors);
	}
	var items = bunga_Dataset.extractItemsById(dataset,descriptors,extraFields,statesById,photosByRef);
	var access = items;
	var _g1_access = access;
	var _g1_keys = Reflect.fields(access);
	var _g1_index = 0;
	while(_g1_index < _g1_keys.length) {
		var item = _g1_access[_g1_keys[_g1_index++]];
		item.hydrateChildren(items);
	}
	return new bunga_Dataset(items,descriptors,null);
};
bunga_Dataset.__super__ = bunga_DetailData;
bunga_Dataset.prototype = $extend(bunga_DetailData.prototype,{
	__class__: bunga_Dataset
});
var bunga_Description = function(descriptor,states) {
	this.descriptor = descriptor;
	this.states = states;
};
bunga_Description.__name__ = "bunga.Description";
bunga_Description.prototype = {
	__class__: bunga_Description
};
var bunga_DetailHighlighter = $hx_exports["bunga"]["DetailHighlighter"] = function() {
	this.wordsToHighlight = [];
};
bunga_DetailHighlighter.__name__ = "bunga.DetailHighlighter";
bunga_DetailHighlighter.prototype = {
	loadWordText: function(text) {
		var lines = text.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var words = line.split(",");
			var _g1 = 0;
			while(_g1 < words.length) {
				var word = words[_g1];
				++_g1;
				this.wordsToHighlight.push(StringTools.trim(word));
			}
		}
	}
	,highlightTaxons: function(taxons) {
		var _this = this.wordsToHighlight;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = bunga_ERegTools.escape(_this[i]);
		}
		var reTxt = result.join("|");
		var re_r = new RegExp("([^\\w<>]|^|<p>)(" + reTxt + ")([^\\w<>]|$|</p>)","g".split("u").join(""));
		var access = taxons;
		var _g_access = access;
		var _g_keys = Reflect.fields(access);
		var _g_index = 0;
		while(_g_index < _g_keys.length) {
			var taxon = _g_access[_g_keys[_g_index++]];
			taxon.detail = taxon.detail.replace(re_r,"$1<b>$2</b>$3");
		}
	}
	,__class__: bunga_DetailHighlighter
};
var bunga_ERegTools = function() { };
bunga_ERegTools.__name__ = "bunga.ERegTools";
bunga_ERegTools.escape = function(string) {
	var _this_r = new RegExp("[.*+?^${}()|[\\]\\\\]","g".split("u").join(""));
	return string.replace(_this_r,"\\$&");
};
var bunga_Field = function(std,id,label) {
	this.std = std;
	this.id = id;
	this.label = label;
};
bunga_Field.__name__ = "bunga.Field";
bunga_Field.prototype = {
	__class__: bunga_Field
};
var bunga_FileNameGenerator = function() { };
bunga_FileNameGenerator.__name__ = "bunga.FileNameGenerator";
bunga_FileNameGenerator.generate = function(name) {
	var generatedName = name;
	var _g = 0;
	var _g1 = bunga_FileNameGenerator.forbiddenChars;
	while(_g < _g1.length) {
		var char = _g1[_g];
		++_g;
		generatedName = StringTools.replace(generatedName,char,"_");
	}
	return generatedName;
};
var bunga_Hierarchy = $hx_exports["bunga"]["Hierarchy"] = function() { };
bunga_Hierarchy.__name__ = "bunga.Hierarchy";
bunga_Hierarchy.getEntries = function(hierarchy,entries,path) {
	if(path == null) {
		path = "";
	}
	if(hierarchy == null) {
		return new haxe_ds_List();
	}
	if(entries == null) {
		entries = new haxe_ds_List();
	}
	var content = haxe_io_Bytes.ofString("");
	var access = hierarchy;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var entry = _g_access[_g_keys[_g_index++]];
		if(entry.topLevel || path != "") {
			var entryName = bunga_FileNameGenerator.generate(entry.name);
			var currentPath = path + encodeURIComponent(entryName) + "/";
			entries.push({ fileName : currentPath, fileSize : content.length, fileTime : new Date(), compressed : false, dataSize : 0, data : content, crc32 : haxe_crypto_Crc32.make(content)});
			bunga_Hierarchy.getEntries(entry.children,entries,currentPath);
		}
	}
	return entries;
};
bunga_Hierarchy.toZip = function(hierarchy) {
	var entries = bunga_Hierarchy.getEntries(hierarchy);
	var bytes = new haxe_io_BytesOutput();
	var writer = new haxe_zip_Writer(bytes);
	writer.write(entries);
	return bytes.getBytes().b.bufferValue;
};
var bunga_ImageCache = $hx_exports["bunga"]["ImageCache"] = function() {
	this.cache = new haxe_ds_StringMap();
};
bunga_ImageCache.__name__ = "bunga.ImageCache";
bunga_ImageCache.prototype = {
	createStore: function(db) {
		if(!db.objectStoreNames.contains("ImageCache")) {
			db.createObjectStore("ImageCache",{ keyPath : "url"});
		}
	}
	,dbStore: function(url,blob) {
		var _gthis = this;
		var rq = window.indexedDB.open("ImageCache",1);
		rq.onupgradeneeded = function() {
			_gthis.createStore(rq.result);
		};
		rq.onerror = function() {
			console.log("src/bunga/ImageCache.hx:38:","Impossible to store data on your browser.");
		};
		rq.onsuccess = function() {
			var db = rq.result;
			var transaction = db.transaction("ImageCache","readwrite");
			transaction.oncomplete = function() {
				console.log("src/bunga/ImageCache.hx:47:","Write for URL #" + url + " successful");
			};
			var ImageCache = transaction.objectStore("ImageCache");
			ImageCache.put({ url : url, image : blob});
		};
	}
	,dbList: function() {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			var rq = window.indexedDB.open("ImageCache",1);
			rq.onupgradeneeded = function() {
				_gthis.createStore(rq.result);
			};
			rq.onsuccess = function() {
				var db = rq.result;
				var transaction = db.transaction("ImageCache","readonly");
				transaction.oncomplete = function() {
					console.log("src/bunga/ImageCache.hx:69:","Listing ImageCache URLs successful");
				};
				var imageCache = transaction.objectStore("ImageCache");
				var list = imageCache.getAll();
				list.onsuccess = function() {
					resolve(list.result);
				};
				list.onerror = function() {
					console.log("src/bunga/ImageCache.hx:80:","Listing ImageCache URLs failed.");
					reject(rq.result);
				};
			};
			rq.onerror = function() {
				reject(rq.result);
			};
		});
	}
	,dbLoad: function(id) {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			var rq = window.indexedDB.open("ImageCache",1);
			rq.onupgradeneeded = function() {
				_gthis.createStore(rq.result);
			};
			rq.onsuccess = function() {
				var db = rq.result;
				var transaction = db.transaction("ImageCache","readonly");
				transaction.oncomplete = function() {
					console.log("src/bunga/ImageCache.hx:103:","Read from dataset #" + id + " successful");
				};
				var ImageCache = transaction.objectStore("ImageCache");
				var read = ImageCache.get(id);
				read.onsuccess = function() {
					resolve(read.result);
				};
				read.onerror = function() {
					console.log("src/bunga/ImageCache.hx:113:","Read from dataset #" + id + " failed");
					reject(read.result);
				};
			};
			rq.onerror = function() {
				reject(rq.result);
			};
		});
	}
	,initFromDatabase: function() {
		var _gthis = this;
		return this.dbList().then(function(data) {
			var _g = 0;
			while(_g < data.length) {
				var entry = data[_g];
				++_g;
				_gthis.cache.h[entry.url] = entry.blob;
			}
		});
	}
	,addFromUrl: function(url) {
		var _gthis = this;
		var rq = new XMLHttpRequest();
		rq.open("GET",url);
		rq.responseType = "blob";
		rq.onload = function(data) {
			_gthis.cache.h[url] = rq.response;
			console.log("src/bunga/ImageCache.hx:137:",rq.response);
		};
		rq.send();
	}
	,get: function(url) {
		return this.cache.h[url];
	}
	,__class__: bunga_ImageCache
};
var bunga_State = function(id,descriptorId,name,photos) {
	this.id = id;
	this.descriptorId = descriptorId;
	this.name = name;
	this.photos = photos;
};
bunga_State.__name__ = "bunga.State";
bunga_State.fromSdd = function(state,photosByRef) {
	var _g = state.id;
	var _g1 = state.characterId;
	var _g2 = state.label;
	var _this = state.mediaObjectsRefs;
	var result = new Array(_this.length);
	var _g3 = 0;
	var _g4 = _this.length;
	while(_g3 < _g4) {
		var i = _g3++;
		result[i] = photosByRef[_this[i].ref];
	}
	return new bunga_State(_g,_g1,_g2,result);
};
bunga_State.prototype = {
	__class__: bunga_State
};
var bunga_Taxon = function(item,descriptions,bookInfoByIds) {
	this.bookInfoByIds = { };
	bunga_HierarchicalItem.call(this,"taxon",item.id,item.hid,item.parentId,item.topLevel,Reflect.fields(item.children),item);
	this.descriptions = descriptions;
	if(bookInfoByIds != null) {
		this.bookInfoByIds = bookInfoByIds;
	}
};
bunga_Taxon.__name__ = "bunga.Taxon";
bunga_Taxon.fromSdd = function(taxon,extraFields,photosByRef,descriptors,statesById) {
	var descriptions_h = Object.create(null);
	var _g = 0;
	var _g1 = taxon.categoricals;
	while(_g < _g1.length) {
		var categorical = _g1[_g];
		++_g;
		var _g2 = descriptors[categorical.ref];
		var _this = categorical.stateRefs;
		var result = new Array(_this.length);
		var _g3 = 0;
		var _g4 = _this.length;
		while(_g3 < _g4) {
			var i = _g3++;
			result[i] = statesById[_this[i].ref];
		}
		var description = new bunga_Description(_g2,result);
		descriptions_h[categorical.ref] = description;
	}
	var _g = taxon.id;
	var _g1 = taxon.id;
	var _g2 = taxon.parentId;
	var _g3 = taxon.parentId == null;
	var _g4 = taxon.childrenIds;
	var photosByRef1 = photosByRef;
	var names = taxon.label.split("/");
	var name = names[0];
	var author = names[1];
	var nameCN = names[2];
	var fields = bunga_Field.standard.concat(extraFields);
	var floreRe = new EReg("Flore Madagascar et Comores\\s*<br>\\s*fasc\\s+(\\d*)\\s*<br>\\s*page\\s+(null|\\d*)","i");
	var fasc = null;
	var page = null;
	if(floreRe.match(taxon.detail)) {
		fasc = Std.parseInt(floreRe.matched(1));
		page = Std.parseInt(floreRe.matched(2));
	}
	var taxon1 = taxon.detail;
	var result = new Array(fields.length);
	var _g5 = 0;
	var _g6 = fields.length;
	while(_g5 < _g6) {
		var i = _g5++;
		result[i] = fields[i].label;
	}
	var detail = bunga_DetailData.removeFromDescription(taxon1,result).replace(floreRe.r,"");
	var emptyParagraphRe = new EReg("<p>(\n|\t|\\s|<br>|&nbsp;)*</p>","gi");
	if(emptyParagraphRe.match(detail)) {
		detail = detail.replace(emptyParagraphRe.r,"");
	}
	var _this = taxon.mediaObjectsRefs;
	var result = new Array(_this.length);
	var _g5 = 0;
	var _g6 = _this.length;
	while(_g5 < _g6) {
		var i = _g5++;
		result[i] = photosByRef1[_this[i].ref];
	}
	var photos = result;
	var data = new bunga_DetailData(name,author,nameCN,fasc,page,detail,photos,extraFields,null,null,null,null,null,null,null,null);
	var _g5 = 0;
	while(_g5 < fields.length) {
		var field = fields[_g5];
		++_g5;
		(field.std ? data : data.extra)[field.id] = bunga_DetailData.findInDescription(taxon.detail,field.label);
	}
	var _g5 = new bunga_HierarchicalItem("taxon",_g,_g1,_g2,_g3,_g4,data);
	var _g = [];
	var _g1 = haxe_ds_StringMap.kvIterator(descriptions_h);
	while(_g1.hasNext()) {
		var _g2 = _g1.next();
		var _ = _g2.key;
		var value = _g2.value;
		_g.push(value);
	}
	return new bunga_Taxon(_g5,_g,null);
};
bunga_Taxon.__super__ = bunga_HierarchicalItem;
bunga_Taxon.prototype = $extend(bunga_HierarchicalItem.prototype,{
	__class__: bunga_Taxon
});
var bunga_TaxonToTex = $hx_exports["bunga"]["TaxonToTex"] = function(taxons) {
	this.progressListeners = [];
	this.pictureNameByUrl = new haxe_ds_StringMap();
	this.photos = [];
	var _g = 0;
	while(_g < taxons.length) {
		var taxon = taxons[_g];
		++_g;
		if(taxon.photos.length > 0) {
			var photo = taxon.photos[0];
			var this1 = this.pictureNameByUrl;
			var value = bunga_FileNameGenerator.generate(taxon.name) + ".jpg";
			this1.h[photo] = value;
			this.photos.push(photo);
		}
	}
};
bunga_TaxonToTex.__name__ = "bunga.TaxonToTex";
bunga_TaxonToTex.prototype = {
	picture: function(resolve,urls) {
		return this.pictureNameByUrl.h[urls[0]];
	}
	,onProgress: function(listener) {
		this.progressListeners.push(listener);
	}
	,progressed: function(progress,progresMax) {
		var _g = 0;
		var _g1 = this.progressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(progress,progresMax);
		}
	}
	,'export': function(taxons) {
		var _gthis = this;
		var texTemplate = haxe_Resource.getString("tex_template");
		var template = new haxe_Template(texTemplate);
		var entries = new haxe_ds_List();
		var texFileContent = haxe_io_Bytes.ofString(template.execute({ taxons : taxons},this));
		entries.push({ fileName : "latex/export.tex", fileSize : texFileContent.length, fileTime : new Date(), compressed : false, dataSize : 0, data : texFileContent, crc32 : haxe_crypto_Crc32.make(texFileContent)});
		return new Promise(function(resolve,reject) {
			var semaphore = _gthis.photos.length;
			var semDec = function() {
				semaphore -= 1;
				_gthis.progressed(_gthis.photos.length - semaphore,_gthis.photos.length);
				if(semaphore == 0) {
					var bytes = new haxe_io_BytesOutput();
					var writer = new haxe_zip_Writer(bytes);
					writer.write(entries);
					resolve(bytes.getBytes().b.bufferValue);
				}
			};
			var _g = 0;
			var _g1 = _gthis.photos;
			while(_g < _g1.length) {
				var photo = [_g1[_g]];
				++_g;
				var rq = new haxe_http_HttpJs(photo[0]);
				rq.onBytes = (function(photo) {
					return function(bytes) {
						entries.push({ fileName : "latex/" + _gthis.pictureNameByUrl.h[photo[0]], fileSize : bytes.length, fileTime : new Date(), compressed : false, dataSize : 0, data : bytes, crc32 : haxe_crypto_Crc32.make(bytes)});
						semDec();
					};
				})(photo);
				rq.onError = (function() {
					return function(msg) {
						console.log("src/bunga/TaxonToTex.hx:92:","error: " + msg);
						semDec();
					};
				})();
				rq.request(false);
			}
		});
	}
	,__class__: bunga_TaxonToTex
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_message:"get_message"}
});
var haxe_Resource = function() { };
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw haxe_Exception.thrown("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
haxe_Template.__name__ = "haxe.Template";
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw haxe_Exception.thrown("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		var kwdEnd = function(kwd) {
			var pos = -1;
			var length = kwd.length;
			if(HxOverrides.substr(p,0,length) == kwd) {
				pos = length;
				var _g_offset = 0;
				var _g_s = HxOverrides.substr(p,length,null);
				while(_g_offset < _g_s.length) {
					var c = _g_s.charCodeAt(_g_offset++);
					if(c == 32) {
						++pos;
					} else {
						break;
					}
				}
			}
			return pos;
		};
		var pos = kwdEnd("if");
		if(pos > 0) {
			p = HxOverrides.substr(p,pos,p.length - pos);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t = tokens.first();
			var eelse;
			if(t == null) {
				throw haxe_Exception.thrown("Unclosed 'if'");
			}
			if(t.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t = tokens.pop();
				if(t == null || t.p != "end") {
					throw haxe_Exception.thrown("Unclosed 'else'");
				}
			} else {
				t.p = HxOverrides.substr(t.p,4,t.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		var pos = kwdEnd("foreach");
		if(pos >= 0) {
			p = HxOverrides.substr(p,pos,p.length - pos);
			var e = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t = tokens.pop();
			if(t == null || t.p != "end") {
				throw haxe_Exception.thrown("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			var _g_offset = 0;
			var _g_s = data;
			while(_g_offset < _g_s.length) {
				var _g1_key = _g_offset;
				var _g1_value = _g_s.charCodeAt(_g_offset++);
				var i = _g1_key;
				var c = _g1_value;
				if(c != 32) {
					l.add({ p : HxOverrides.substr(data,i,null), s : true});
					break;
				}
			}
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw haxe_Exception.thrown(l.first().p);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				var s = _g1;
				throw haxe_Exception.thrown("Unexpected '" + s + "' in " + expr);
			} else {
				throw _g;
			}
		}
		return function() {
			try {
				return e();
			} catch( _g ) {
				var exc = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Error : " + Std.string(exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw haxe_Exception.thrown(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,skipSpaces: function(l) {
		var p = l.first();
		while(p != null) {
			var _g_offset = 0;
			var _g_s = p.p;
			while(_g_offset < _g_s.length) {
				var c = _g_s.charCodeAt(_g_offset++);
				if(c != 32) {
					return;
				}
			}
			l.pop();
			p = l.first();
		}
	}
	,makeExpr2: function(l) {
		this.skipSpaces(l);
		var p = l.pop();
		this.skipSpaces(l);
		if(p == null) {
			throw haxe_Exception.thrown("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			this.skipSpaces(l);
			var e1 = this.makeExpr(l);
			this.skipSpaces(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw haxe_Exception.thrown(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			this.skipSpaces(l);
			var e2 = this.makeExpr(l);
			this.skipSpaces(l);
			var p2 = l.pop();
			this.skipSpaces(l);
			if(p2 == null || p2.p != ")") {
				throw haxe_Exception.thrown(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw haxe_Exception.thrown("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw haxe_Exception.thrown(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this = this.buf;
			var x = Std.string(e1());
			_this.b += Std.string(x);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e1 = e.expr;
			var v = e1();
			if(v == null || v == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e1 = val;
				this.run(e1);
			}
			break;
		case 5:
			var loop = e.loop;
			var e1 = e.expr;
			var v = e1();
			try {
				var x = $getIterator(v);
				if(x.hasNext == null) {
					throw haxe_Exception.thrown(null);
				}
				v = x;
			} catch( _g ) {
				try {
					if(v.hasNext == null) {
						throw haxe_Exception.thrown(null);
					}
				} catch( _g1 ) {
					throw haxe_Exception.thrown("Cannot iter on " + Std.string(v));
				}
			}
			this.stack.push(this.context);
			var v1 = v;
			var ctx = v1;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head = params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(p._hx_index == 0) {
					var v1 = p.v;
					pl.push(this.resolve(v1));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this = this.buf;
				var x = Std.string(v.apply(this.macros,pl));
				_this.b += Std.string(x);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( _g1 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e) + ")";
				throw haxe_Exception.thrown(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.prototype = {
	iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
	,__properties__: {get_responseData:"get_responseData"}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined" && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postBytes;
		var _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				var bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			var str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Writer = function(o) {
	this.o = o;
	this.files = new haxe_ds_List();
};
haxe_zip_Writer.__name__ = "haxe.zip.Writer";
haxe_zip_Writer.prototype = {
	writeZipDate: function(date) {
		var hour = date.getHours();
		var min = date.getMinutes();
		var sec = date.getSeconds() >> 1;
		this.o.writeUInt16(hour << 11 | min << 5 | sec);
		var year = date.getFullYear() - 1980;
		var month = date.getMonth() + 1;
		var day = date.getDate();
		this.o.writeUInt16(year << 9 | month << 5 | day);
	}
	,writeEntryHeader: function(f) {
		var o = this.o;
		var flags = 0;
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				if(e._hx_index == 2) {
					flags |= 2048;
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = new haxe_io_Bytes(new ArrayBuffer(0));
		} else {
			if(f.crc32 == null) {
				if(f.compressed) {
					throw haxe_Exception.thrown("CRC32 must be processed before compression");
				}
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) {
				f.fileSize = f.data.length;
			}
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed ? 8 : 0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		var e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var f1 = val;
				switch(f1._hx_index) {
				case 0:
					var bytes = f1.bytes;
					var tag = f1.tag;
					e.writeUInt16(tag);
					e.writeUInt16(bytes.length);
					e.write(bytes);
					break;
				case 1:
					var crc = f1.crc;
					var name = f1.name;
					var namebytes = haxe_io_Bytes.ofString(name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(crc);
					e.write(namebytes);
					break;
				case 2:
					break;
				}
			}
		}
		var ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	,write: function(files) {
		var _g_head = files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var f = val;
			this.writeEntryHeader(f);
			this.o.writeFullBytes(f.data,0,f.data.length);
		}
		this.writeCDR();
	}
	,writeCDR: function() {
		var cdr_size = 0;
		var cdr_offset = 0;
		var _g_head = this.files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var f = val;
			var namelen = f.name.length;
			var extraFieldsLength = f.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(f.compressed ? 8 : 0);
			this.writeZipDate(f.date);
			this.o.writeInt32(f.crc);
			this.o.writeInt32(f.clen);
			this.o.writeInt32(f.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(f.name);
			this.o.write(f.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + f.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
	,__class__: haxe_zip_Writer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = "js.Browser";
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var sdd_CategoricalRef = function(ref,stateRefs) {
	this.ref = ref;
	this.stateRefs = stateRefs;
};
sdd_CategoricalRef.__name__ = "sdd.CategoricalRef";
sdd_CategoricalRef.prototype = {
	__class__: sdd_CategoricalRef
};
var sdd_Representation = function(label,detail,mediaObjectsRefs) {
	this.mediaObjectsRefs = [];
	this.label = label;
	this.detail = detail;
	if(mediaObjectsRefs != null) {
		this.mediaObjectsRefs = mediaObjectsRefs;
	}
};
sdd_Representation.__name__ = "sdd.Representation";
sdd_Representation.prototype = {
	__class__: sdd_Representation
};
var sdd_Character = function(id,representation,states) {
	this.childrenIds = [];
	this.inapplicableStatesRefs = [];
	this.states = [];
	sdd_Representation.call(this,representation.label,representation.detail,representation.mediaObjectsRefs);
	this.id = id;
	if(states != null) {
		this.states = states;
	}
};
sdd_Character.__name__ = "sdd.Character";
sdd_Character.__super__ = sdd_Representation;
sdd_Character.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_Character
});
var sdd_Dataset = function(taxons,characters,states,mediaObjects) {
	this.taxons = taxons;
	this.characters = characters;
	this.states = states;
	this.mediaObjects = mediaObjects;
};
sdd_Dataset.__name__ = "sdd.Dataset";
sdd_Dataset.prototype = {
	__class__: sdd_Dataset
};
var sdd_TaxonHierarchy = function(taxon,childrenHierarchyIds) {
	this.taxon = taxon;
	this.childrenHierarchyIds = childrenHierarchyIds;
};
sdd_TaxonHierarchy.__name__ = "sdd.TaxonHierarchy";
sdd_TaxonHierarchy.prototype = {
	__class__: sdd_TaxonHierarchy
};
var sdd_CharactersAndStatesById = function(charactersById,statesById) {
	this.charactersById = charactersById;
	this.statesById = statesById;
};
sdd_CharactersAndStatesById.__name__ = "sdd.CharactersAndStatesById";
sdd_CharactersAndStatesById.prototype = {
	__class__: sdd_CharactersAndStatesById
};
var sdd_Loader = $hx_exports["sdd"]["Loader"] = function(strictMode) {
	if(strictMode == null) {
		strictMode = true;
	}
	this.exceptionLog = [];
	this.strictMode = strictMode;
};
sdd_Loader.__name__ = "sdd.Loader";
sdd_Loader.prototype = {
	loadDataset: function(datasetElement) {
		var mediaObjectsById = this.loadMediaObjects(datasetElement);
		var charsAndStatesById = this.loadDatasetCharacters(datasetElement,mediaObjectsById);
		return new sdd_Dataset(Lambda.array(this.loadDatasetTaxons(datasetElement,mediaObjectsById,charsAndStatesById.charactersById)),Lambda.array(charsAndStatesById.charactersById),Lambda.array(charsAndStatesById.statesById),Lambda.array(mediaObjectsById));
	}
	,loadMediaObjects: function(datasetElement) {
		var mediaObjectsElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"MediaObjects");
		var mediaObjectsById = new haxe_ds_StringMap();
		if(mediaObjectsElement == null) {
			return mediaObjectsById;
		}
		var mediaObjectElement = mediaObjectsElement.elementsNamed("MediaObject");
		while(mediaObjectElement.hasNext()) {
			var mediaObjectElement1 = mediaObjectElement.next();
			var sourceElement = sdd_XmlExtensions.firstElementNamed(mediaObjectElement1,"Source");
			if(sourceElement != null) {
				var value = mediaObjectElement1.get("id");
				var exception = new sdd_SddException("A MediaObject declaration misses its 'id'.");
				if(value == null) {
					throw haxe_Exception.thrown(exception);
				}
				var id = value;
				var representation = this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(mediaObjectElement1,"Representation"),mediaObjectsById);
				var value1 = new sdd_MediaObject(id,sourceElement.get("href"),representation.label,representation.detail);
				mediaObjectsById.h[id] = value1;
			}
		}
		return mediaObjectsById;
	}
	,loadRepresentation: function(representationElement,mediaObjectsByRef) {
		if(representationElement == null) {
			return new sdd_Representation("","",[]);
		}
		var mediaObjectsRefs = [];
		var mediaObjectElement = representationElement.elementsNamed("MediaObject");
		while(mediaObjectElement.hasNext()) {
			var mediaObjectElement1 = mediaObjectElement.next();
			var value = mediaObjectElement1.get("ref");
			var exception = new sdd_SddException("A MediaObject is missing its ref.");
			if(value == null) {
				throw haxe_Exception.thrown(exception);
			}
			mediaObjectsRefs.push(new sdd_MediaObjectRef(value));
		}
		var labelNode = sdd_XmlExtensions.firstElementNamed(representationElement,"Label");
		var detailElement = sdd_XmlExtensions.firstElementNamed(representationElement,"Detail");
		return new sdd_Representation(labelNode != null ? sdd_XmlExtensions.innerText(labelNode) : "_",detailElement != null ? sdd_XmlExtensions.innerText(detailElement) : "_",mediaObjectsRefs);
	}
	,logException: function(exception) {
		this.exceptionLog.push(exception.get_message());
	}
	,assertNotNull: function(value,exception) {
		if(value == null) {
			throw haxe_Exception.thrown(exception);
		}
		return value;
	}
	,loadDatasetTaxons: function(datasetElement,mediaObjectsById,charactersById) {
		var taxonsById = new haxe_ds_StringMap();
		var taxonNamesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"TaxonNames");
		if(taxonNamesElement == null) {
			return new haxe_ds_StringMap();
		}
		var taxonElement = taxonNamesElement.elementsNamed("TaxonName");
		while(taxonElement.hasNext()) {
			var taxonElement1 = taxonElement.next();
			var value = taxonElement1.get("id");
			var exception = new sdd_SddException("A Taxon is missing its 'id'.");
			if(value == null) {
				throw haxe_Exception.thrown(exception);
			}
			var taxonId = value;
			var value1 = new sdd_Taxon(taxonId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(taxonElement1,"Representation"),mediaObjectsById));
			taxonsById.h[taxonId] = value1;
		}
		var codedDescriptionsElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"CodedDescriptions");
		if(codedDescriptionsElement != null) {
			var codedDescriptionElement = codedDescriptionsElement.elementsNamed("CodedDescription");
			while(codedDescriptionElement.hasNext()) {
				var codedDescriptionElement1 = codedDescriptionElement.next();
				try {
					var value = sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"Scope");
					var exception = new sdd_SddException("A CodedDescription is missing its 'Scope'.");
					if(value == null) {
						throw haxe_Exception.thrown(exception);
					}
					var scopeElement = value;
					var value1 = sdd_XmlExtensions.firstElementNamed(scopeElement,"TaxonName");
					var exception1 = new sdd_SddException("A CodedDescription Scope doesn't have a 'Taxon' element, which is the only one supported by this loader.");
					if(value1 == null) {
						throw haxe_Exception.thrown(exception1);
					}
					var taxonNameElement = value1;
					var value2 = taxonNameElement.get("ref");
					var exception2 = new sdd_SddException("A TaxonName is missing its 'ref'.");
					if(value2 == null) {
						throw haxe_Exception.thrown(exception2);
					}
					var taxonId = value2;
					var representation = this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"Representation"),mediaObjectsById);
					var value3 = taxonsById.h[taxonId];
					var exception3 = new sdd_SddRefException("Scope > TaxonName","Taxon",taxonId);
					if(value3 == null) {
						throw haxe_Exception.thrown(exception3);
					}
					var taxonToAugment = value3;
					if(representation != null) {
						var s = representation.label;
						if(!(s == null || s == "")) {
							taxonToAugment.label = representation.label;
						}
						var s1 = representation.detail;
						if(!(s1 == null || s1 == "")) {
							taxonToAugment.detail = representation.detail;
						}
						if(representation.mediaObjectsRefs != null && representation.mediaObjectsRefs.length > 0) {
							taxonToAugment.mediaObjectsRefs = representation.mediaObjectsRefs;
						}
					}
					var summaryDataElement = sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"SummaryData");
					if(summaryDataElement != null) {
						var categoricalElements = summaryDataElement.elementsNamed("Categorical");
						var categoricalElement = categoricalElements;
						while(categoricalElement.hasNext()) {
							var categoricalElement1 = categoricalElement.next();
							var value4 = categoricalElement1.get("ref");
							var exception4 = new sdd_SddException("A Categorical is missing its 'ref'.");
							if(value4 == null) {
								throw haxe_Exception.thrown(exception4);
							}
							var categorical = new sdd_CategoricalRef(value4,[]);
							var stateElement = categoricalElement1.elementsNamed("State");
							while(stateElement.hasNext()) {
								var stateElement1 = stateElement.next();
								var value5 = stateElement1.get("ref");
								var exception5 = new sdd_SddException("A State is missing its 'ref'.");
								if(value5 == null) {
									throw haxe_Exception.thrown(exception5);
								}
								var stateId = value5;
								categorical.stateRefs.push(new sdd_StateRef(stateId));
							}
							taxonToAugment.categoricals.push(categorical);
						}
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g);
					if(((_g1) instanceof sdd_SddException)) {
						var e = _g1;
						if(this.strictMode) {
							throw e;
						} else {
							this.logException(e);
						}
					} else {
						throw _g;
					}
				}
			}
		}
		var taxonHierarchiesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"TaxonHierarchies");
		var taxonHierarchyElement = taxonHierarchiesElement != null ? sdd_XmlExtensions.firstElementNamed(taxonHierarchiesElement,"TaxonHierarchy") : null;
		var nodesElement = taxonHierarchyElement != null ? sdd_XmlExtensions.firstElementNamed(taxonHierarchyElement,"Nodes") : null;
		if(nodesElement != null) {
			var hierarchiesById_h = Object.create(null);
			var nodeElement = nodesElement.elementsNamed("Node");
			while(nodeElement.hasNext()) {
				var nodeElement1 = nodeElement.next();
				try {
					var value = nodeElement1.get("id");
					var exception = new sdd_SddException("A TaxonHierarchy > Nodes > Node is missing its 'id'.");
					if(value == null) {
						throw haxe_Exception.thrown(exception);
					}
					var hierarchyId = value;
					var value1 = sdd_XmlExtensions.firstElementNamed(nodeElement1,"TaxonName");
					var exception1 = new sdd_SddException("A TaxonHierarchy > Nodes > Node is missing its 'TaxonName'.");
					if(value1 == null) {
						throw haxe_Exception.thrown(exception1);
					}
					var taxonNameElement = value1;
					var value2 = taxonNameElement.get("ref");
					var exception2 = new sdd_SddException("A TaxonHierarchy > Nodes > Node > TaxonName is missing its 'ref'.");
					if(value2 == null) {
						throw haxe_Exception.thrown(exception2);
					}
					var taxonId = value2;
					var value3 = taxonsById.h[taxonId];
					var exception3 = new sdd_SddRefException("TaxonHierarchy > Nodes > Node > TaxonName","Taxons",taxonId);
					if(value3 == null) {
						throw haxe_Exception.thrown(exception3);
					}
					var taxon = value3;
					var hierarchy = hierarchiesById_h[hierarchyId];
					taxon.hid = hierarchyId;
					if(hierarchy == null) {
						hierarchy = new sdd_TaxonHierarchy(taxon,[]);
					} else {
						hierarchy.taxon = taxon;
					}
					hierarchiesById_h[hierarchyId] = hierarchy;
					var parentElement = sdd_XmlExtensions.firstElementNamed(nodeElement1,"Parent");
					if(parentElement != null) {
						var value4 = parentElement.get("ref");
						var exception4 = new sdd_SddException("A TaxonHierarchy >> Parent is missing its 'ref'.");
						if(value4 == null) {
							throw haxe_Exception.thrown(exception4);
						}
						var parentId = value4;
						var parent = hierarchiesById_h[parentId];
						if(parent == null) {
							parent = new sdd_TaxonHierarchy(null,[hierarchyId]);
							hierarchiesById_h[parentId] = parent;
						} else {
							parent.childrenHierarchyIds.push(hierarchyId);
						}
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g);
					if(((_g1) instanceof sdd_SddException)) {
						var e = _g1;
						if(this.strictMode) {
							throw e;
						} else {
							this.logException(e);
						}
					} else {
						throw _g;
					}
				}
			}
			var hierarchy = haxe_ds_StringMap.valueIterator(hierarchiesById_h);
			while(hierarchy.hasNext()) {
				var hierarchy1 = hierarchy.next();
				if(hierarchy1.taxon == null) {
					console.log("src/sdd/Loader.hx:201:",hierarchy1);
				}
				var augmentedTaxon = hierarchy1.taxon;
				var _g = 0;
				var _g1 = hierarchy1.childrenHierarchyIds;
				while(_g < _g1.length) {
					var hid = _g1[_g];
					++_g;
					var child = hierarchiesById_h[hid].taxon;
					child.parentId = augmentedTaxon.id;
					augmentedTaxon.childrenIds.push(child.id);
				}
			}
		}
		return taxonsById;
	}
	,loadDatasetCharacters: function(datasetElement,mediaObjectsById) {
		var charactersById = new haxe_ds_StringMap();
		var charactersElements = sdd_XmlExtensions.firstElementNamed(datasetElement,"Characters");
		var statesById = new haxe_ds_StringMap();
		if(charactersElements == null) {
			return new sdd_CharactersAndStatesById(charactersById,statesById);
		}
		var characterElement = charactersElements.elements();
		while(characterElement.hasNext()) {
			var characterElement1 = characterElement.next();
			try {
				var tmp;
				if(characterElement1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (characterElement1.nodeType == null ? "null" : XmlType.toString(characterElement1.nodeType)));
				}
				if(characterElement1.nodeName != "CategoricalCharacter") {
					if(characterElement1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (characterElement1.nodeType == null ? "null" : XmlType.toString(characterElement1.nodeType)));
					}
					tmp = characterElement1.nodeName != "QuantitativeCharacter";
				} else {
					tmp = false;
				}
				if(tmp) {
					continue;
				}
				var value = characterElement1.get("id");
				var exception = new sdd_SddException("A Character is missing its 'id'.");
				if(value == null) {
					throw haxe_Exception.thrown(exception);
				}
				var characterId = value;
				var statesElement = sdd_XmlExtensions.firstElementNamed(characterElement1,"States");
				var states = [];
				if(statesElement != null) {
					var stateElement = statesElement.elementsNamed("StateDefinition");
					while(stateElement.hasNext()) {
						var stateElement1 = stateElement.next();
						var value1 = stateElement1.get("id");
						var exception1 = new sdd_SddException("A State is missing its 'id'");
						if(value1 == null) {
							throw haxe_Exception.thrown(exception1);
						}
						var stateId = value1;
						var state = new sdd_State(stateId,characterId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(stateElement1,"Representation"),mediaObjectsById));
						statesById.h[stateId] = state;
						states.push(state);
					}
				}
				var value2 = new sdd_Character(characterId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(characterElement1,"Representation"),mediaObjectsById),states);
				charactersById.h[characterId] = value2;
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				if(((_g1) instanceof sdd_SddException)) {
					var e = _g1;
					if(this.strictMode) {
						throw e;
					} else {
						this.logException(e);
					}
				} else {
					throw _g;
				}
			}
		}
		var characterTreesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"CharacterTrees");
		if(characterTreesElement != null) {
			var characterTreeElement = characterTreesElement.elementsNamed("CharacterTree");
			while(characterTreeElement.hasNext()) {
				var characterTreeElement1 = characterTreeElement.next();
				var nodesElement = sdd_XmlExtensions.firstElementNamed(characterTreeElement1,"Nodes");
				if(nodesElement != null) {
					var charNodeElement = nodesElement.elementsNamed("CharNode");
					while(charNodeElement.hasNext()) {
						var charNodeElement1 = charNodeElement.next();
						try {
							var value = sdd_XmlExtensions.firstElementNamed(charNodeElement1,"Character");
							var exception = new sdd_SddException("A CharNode is missing its 'Character'.");
							if(value == null) {
								throw haxe_Exception.thrown(exception);
							}
							var characterElement = value;
							var value1 = characterElement.get("ref");
							var exception1 = new sdd_SddException("A CharNode > Character is missing its 'ref.");
							if(value1 == null) {
								throw haxe_Exception.thrown(exception1);
							}
							var characterRef = value1;
							var value2 = charactersById.h[characterRef];
							var exception2 = new sdd_SddRefException("CharNode > Character","Character",characterRef);
							if(value2 == null) {
								throw haxe_Exception.thrown(exception2);
							}
							var augmentedCharacter = value2;
							var dependencyRulesElement = sdd_XmlExtensions.firstElementNamed(charNodeElement1,"DependencyRules");
							if(dependencyRulesElement != null) {
								var inapplicableIfElement = sdd_XmlExtensions.firstElementNamed(dependencyRulesElement,"InapplicableIf");
								if(inapplicableIfElement != null) {
									var stateElement = inapplicableIfElement.elementsNamed("State");
									while(stateElement.hasNext()) {
										var stateElement1 = stateElement.next();
										var value3 = stateElement1.get("ref");
										var exception3 = new sdd_SddException("A InapplicableIf > State is missing its 'ref'.");
										if(value3 == null) {
											throw haxe_Exception.thrown(exception3);
										}
										var stateRef = value3;
										var value4 = statesById.h[stateRef];
										var exception4 = new sdd_SddRefException("InapplicableIf > State","State",stateRef);
										if(value4 == null) {
											throw haxe_Exception.thrown(exception4);
										}
										var state = value4;
										augmentedCharacter.inapplicableStatesRefs.push(new sdd_StateRef(state.id));
										augmentedCharacter.parentId = state.characterId;
									}
								}
							}
							if(augmentedCharacter.inapplicableStatesRefs.length > 0) {
								charactersById.h[augmentedCharacter.parentId].childrenIds.push(augmentedCharacter.id);
							}
						} catch( _g ) {
							var _g1 = haxe_Exception.caught(_g);
							if(((_g1) instanceof sdd_SddException)) {
								var e = _g1;
								if(this.strictMode) {
									throw e;
								} else {
									this.logException(e);
								}
							} else {
								throw _g;
							}
						}
					}
				}
			}
		}
		return new sdd_CharactersAndStatesById(charactersById,statesById);
	}
	,load: function(text) {
		var xml = Xml.parse(text);
		var datasetsElements = xml.firstElement();
		var datasets = [];
		var datasetElement = datasetsElements.elementsNamed("Dataset");
		while(datasetElement.hasNext()) {
			var datasetElement1 = datasetElement.next();
			datasets.push(this.loadDataset(datasetElement1));
		}
		return datasets;
	}
	,__class__: sdd_Loader
};
var sdd_MediaObject = function(id,source,label,detail) {
	this.id = id;
	this.source = source;
	this.label = label;
	this.detail = detail;
};
sdd_MediaObject.__name__ = "sdd.MediaObject";
sdd_MediaObject.prototype = {
	__class__: sdd_MediaObject
};
var sdd_MediaObjectRef = function(ref) {
	this.ref = ref;
};
sdd_MediaObjectRef.__name__ = "sdd.MediaObjectRef";
sdd_MediaObjectRef.prototype = {
	__class__: sdd_MediaObjectRef
};
var sdd_Saver = $hx_exports["sdd"]["Saver"] = function(datasets) {
	this.mediaObjectsCount = 0;
	this.datasets = datasets;
};
sdd_Saver.__name__ = "sdd.Saver";
sdd_Saver.prototype = {
	taxonParentHid: function(resolve,parentId) {
		var parent = Lambda.find(this.datasets[0].taxons,function(t) {
			return t.id == parentId;
		});
		return parent.hid;
	}
	,html: function(resolve,htmlText) {
		return StringTools.htmlEscape(htmlText);
	}
	,save: function() {
		var sddTemplate = haxe_Resource.getString("sdd_template");
		var template = new haxe_Template(sddTemplate);
		return template.execute({ datasets : this.datasets},this);
	}
	,__class__: sdd_Saver
};
var sdd_SddException = function(message) {
	haxe_Exception.call(this,"Invalid SDD: " + message);
};
sdd_SddException.__name__ = "sdd.SddException";
sdd_SddException.__super__ = haxe_Exception;
sdd_SddException.prototype = $extend(haxe_Exception.prototype,{
	__class__: sdd_SddException
});
var sdd_SddRefException = function(sourceElement,targetElement,ref) {
	sdd_SddException.call(this,"A '" + sourceElement + "' references a missing '" + targetElement + "': " + ref);
};
sdd_SddRefException.__name__ = "sdd.SddRefException";
sdd_SddRefException.__super__ = sdd_SddException;
sdd_SddRefException.prototype = $extend(sdd_SddException.prototype,{
	__class__: sdd_SddRefException
});
var sdd_State = function(id,characterId,representation) {
	sdd_Representation.call(this,representation.label,representation.detail,representation.mediaObjectsRefs);
	this.id = id;
	this.characterId = characterId;
};
sdd_State.__name__ = "sdd.State";
sdd_State.__super__ = sdd_Representation;
sdd_State.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_State
});
var sdd_StateRef = function(ref) {
	this.ref = ref;
};
sdd_StateRef.__name__ = "sdd.StateRef";
sdd_StateRef.prototype = {
	__class__: sdd_StateRef
};
var sdd_Taxon = function(id,representation,childrenIds,categoricals) {
	this.childrenIds = [];
	this.categoricals = [];
	sdd_Representation.call(this,representation.label,representation.detail,representation.mediaObjectsRefs);
	this.id = id;
	if(childrenIds != null) {
		this.childrenIds = childrenIds;
	}
	if(categoricals != null) {
		this.categoricals = categoricals;
	}
};
sdd_Taxon.__name__ = "sdd.Taxon";
sdd_Taxon.__super__ = sdd_Representation;
sdd_Taxon.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_Taxon
});
var sdd_XmlExtensions = function() { };
sdd_XmlExtensions.__name__ = "sdd.XmlExtensions";
sdd_XmlExtensions.firstElementNamed = function(xml,tagName) {
	if(xml != null) {
		return xml.elementsNamed(tagName).next();
	} else {
		return null;
	}
};
sdd_XmlExtensions.innerText = function(xml) {
	if(xml == null) {
		return "";
	}
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var textNode = xml.children[0];
	if(textNode != null) {
		if(textNode.nodeType == Xml.Document || textNode.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (textNode.nodeType == null ? "null" : XmlType.toString(textNode.nodeType)));
		}
		return textNode.nodeValue;
	} else {
		return "";
	}
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
haxe_Resource.content = [{ name : "tex_template", data : "XGRvY3VtZW50Y2xhc3N7YmVhbWVyfQ0KDQpcdXNldGhlbWV7UGFsb0FsdG99DQpcdXNlcGFja2FnZVtmcmVuY2hde2JhYmVsfQ0KXHVzZXBhY2thZ2VbdXRmOF17aW5wdXRlbmN9DQpcdXNlcGFja2FnZXtncmFwaGljeH0NCg0KXGRlZmluZWNvbG9ye0dyZWVufXtyZ2J9ey4xLC43MiwuMX0NCg0KXHRpdGxle1RheG9uc30NClxhdXRob3J7VGlhbiBMaX0gJQ0KXGluc3RpdHV0ZXtNdXPDqXVtIE5hdGlvbmFsIGQnSGlzdG9pcmUgTmF0dXJlbGxlfQ0KJVxkYXRlezIwMjB9DQoNClxiZWdpbntkb2N1bWVudH0NCg0KJXslIG9wZW4gYSBMb2NhbCBUZVggR3JvdXANCiVcc2V0YmVhbWVydGVtcGxhdGV7c2lkZWJhcn17fQ0KJSBcYmVnaW57ZnJhbWV9DQolICAgICAgICAgXHRpdGxlcGFnZQ0KJSAgICAgICAgIFxiZWdpbntjZW50ZXJ9DQolICAgICAgICAgICBcaW5jbHVkZWdyYXBoaWNzW3dpZHRoPTNjbV17c2lnbWFsaXMucG5nfQ0KJSAgICAgICAgIFxlbmR7Y2VudGVyfQ0KJSBcZW5ke2ZyYW1lfQ0KJX0lIGVuZCBMb2NhbCBUZVggR3JvdXANCg0KXHNlY3Rpb257VGF4b25zfQ0KDQo6OmZvcmVhY2ggdGF4b25zOjoNCg0KXGJlZ2lue2ZyYW1lfQ0KICAgIFxmcmFtZXRpdGxlezo6bmFtZTo6fQ0KICAgIFxmcmFtZXN1YnRpdGxlezo6dmVybmFjdWxhck5hbWU6On0NCiAgICBcYmVnaW57YmxvY2t9e0lkZW50aWZpY2F0aW9ufQ0KICAgIDo6aWYgKHBob3Rvcy5sZW5ndGggPiAwKTo6DQogICAgICBcaW5jbHVkZWdyYXBoaWNzW3dpZHRoPTNjbSxoZWlnaHQ9M2NtXXskJHBpY3R1cmUoOjpwaG90b3M6Oil9DQogICAgOjplbmQ6Og0KICAgICAgXGJlZ2lue2l0ZW1pemV9DQogICAgICBcaXRlbSBuYW1lOiA6Om5hbWU6Og0KICAgICAgXGl0ZW0gdmVybmFjdWxhciBuYW1lOiA6OnZlcm5hY3VsYXJOYW1lOjoNCiAgICAgIFxpdGVtIGNoaW5lc2UgbmFtZTogOjpuYW1lQ046Og0KICAgICAgXGVuZHtpdGVtaXplfQ0KICAgIFxlbmR7YmxvY2t9DQogICAgXGJlZ2lue2Jsb2NrfXtEZXNjcmlwdGlvbn0NCiAgICAgIFxiZWdpbntpdGVtaXplfQ0KICAgICAgXGl0ZW0geWVwDQogICAgICA6OmZvcmVhY2ggZGVzY3JpcHRpb25zOjoNCiAgICAgIFxpdGVtIDo6ZGVzY3JpcHRvci5uYW1lOjo6IDo6Zm9yZWFjaCBzdGF0ZXM6OiA6Om5hbWU6OiA6OmVuZDo6IA0KICAgICAgOjplbmQ6Og0KICAgICAgXGVuZHtpdGVtaXplfQ0KICAgIFxlbmR7YmxvY2t9DQpcZW5ke2ZyYW1lfQ0KDQo6OmVuZDo6DQoNClxlbmR7ZG9jdW1lbnR9DQo"},{ name : "sdd_template", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxEYXRhc2V0cyB4bWxucz0iaHR0cDovL3JzLnRkd2cub3JnL1VCSUYvMjAwNi8iIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3JzLnRkd2cub3JnL1VCSUYvMjAwNi8gaHR0cDovL3JzLnRkd2cub3JnL1VCSUYvMjAwNi9TY2hlbWEvMS4xL1NERC54c2QiPg0KCTxUZWNobmljYWxNZXRhZGF0YSBjcmVhdGVkPSIyMDIwLTA0LTI0VDEyOjExOjE1Ij4NCgkJPEdlbmVyYXRvciBuYW1lPSJYcGVyMyIgbm90ZXM9IlRoaXMgc29mdHdhcmUgaXMgZGV2ZWxvcGVkIGJ5IExJUyAtIExhYm9yYXRvcnkgb2YgSW5mb3JtYXRpY3MgYW5kIFN5c3RlbWF0aWNzIChVbml2ZXJzaXTDg8KpIFBpZXJyZSBldCBNYXJpZSBDdXJpZSwgVU1SIDcyMDUsIEZyYW5jZSkgLSB3d3cuaW5mb3N5c2xhYi5mciIgdmVyc2lvbj0iMS41LjEiIC8+DQoJPC9UZWNobmljYWxNZXRhZGF0YT4NCiAgICA6OmZvcmVhY2ggZGF0YXNldHM6Og0KICAgIDxEYXRhc2V0IHhtbG5zPSIiIHhtbDpsYW5nPSJmciI+DQogICAgICAgIDxSZXByZXNlbnRhdGlvbj4NCiAgICAgICAgICAgIDxMYWJlbD5TYW1wbGU8L0xhYmVsPg0KICAgICAgICA8L1JlcHJlc2VudGF0aW9uPg0KICAgICAgICA8VGF4b25OYW1lcz4NCiAgICAgICAgICAgIDo6Zm9yZWFjaCB0YXhvbnM6Og0KICAgICAgICAgICAgPFRheG9uTmFtZSBpZD0iOjppZDo6Ij4NCiAgICAgICAgICAgICAgICA8UmVwcmVzZW50YXRpb24+DQogICAgICAgICAgICAgICAgICAgIDxMYWJlbD46OmxhYmVsOjo8L0xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8RGV0YWlsPiQkaHRtbCg6OmRldGFpbDo6KTwvRGV0YWlsPg0KICAgICAgICAgICAgICAgICAgICA6OmZvcmVhY2ggbWVkaWFPYmplY3RzUmVmczo6DQogICAgICAgICAgICAgICAgICAgIDxNZWRpYU9iamVjdCByZWY9Ijo6cmVmOjoiIC8+DQogICAgICAgICAgICAgICAgICAgIDo6ZW5kOjoNCiAgICAgICAgICAgICAgICA8L1JlcHJlc2VudGF0aW9uPg0KICAgICAgICAgICAgPC9UYXhvbk5hbWU+DQogICAgICAgICAgICA6OmVuZDo6DQogICAgICAgIDwvVGF4b25OYW1lcz4NCiAgICAgICAgPFRheG9uSGllcmFyY2hpZXM+DQogICAgICAgICAgICA8VGF4b25IaWVyYXJjaHkgaWQ9InRoMSI+DQogICAgICAgICAgICAgICAgPFJlcHJlc2VudGF0aW9uPg0KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RGVmYXVsdCBFbnRpdHkgVHJlZTwvTGFiZWw+DQogICAgICAgICAgICAgICAgPC9SZXByZXNlbnRhdGlvbj4NCiAgICAgICAgICAgICAgICA8VGF4b25IaWVyYXJjaHlUeXBlPlVuc3BlY2lmaWVkVGF4b25vbXk8L1RheG9uSGllcmFyY2h5VHlwZT4NCiAgICAgICAgICAgICAgICA8Tm9kZXM+DQogICAgICAgICAgICAgICAgOjpmb3JlYWNoIHRheG9uczo6DQogICAgICAgICAgICAgICAgICAgIDxOb2RlIGlkPSI6OmhpZDo6Ij4NCiAgICAgICAgICAgICAgICAgICAgOjppZiAocGFyZW50SWQgIT0gbnVsbCk6Og0KICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmVudCByZWY9IiQkdGF4b25QYXJlbnRIaWQoOjpwYXJlbnRJZDo6KSIgLz4NCiAgICAgICAgICAgICAgICAgICAgOjplbmQ6Og0KICAgICAgICAgICAgICAgICAgICAgICAgPFRheG9uTmFtZSByZWY9Ijo6aWQ6OiIgLz4NCiAgICAgICAgICAgICAgICAgICAgPC9Ob2RlPg0KICAgICAgICAgICAgICAgIDo6ZW5kOjoNCiAgICAgICAgICAgICAgICA8L05vZGVzPg0KICAgICAgICAgICAgPC9UYXhvbkhpZXJhcmNoeT4NCiAgICAgICAgPC9UYXhvbkhpZXJhcmNoaWVzPg0KICAgICAgICA8Q2hhcmFjdGVycz4NCiAgICAgICAgOjpmb3JlYWNoIGNoYXJhY3RlcnM6Og0KICAgICAgICAgICAgPENhdGVnb3JpY2FsQ2hhcmFjdGVyIGlkPSI6OmlkOjoiPg0KICAgICAgICAgICAgICAgIDxSZXByZXNlbnRhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPExhYmVsPjo6bGFiZWw6OjwvTGFiZWw+DQogICAgICAgICAgICAgICAgICAgIDxEZXRhaWw+JCRodG1sKDo6ZGV0YWlsOjopPC9EZXRhaWw+DQogICAgICAgICAgICAgICAgICAgIDo6Zm9yZWFjaCBtZWRpYU9iamVjdHNSZWZzOjoNCiAgICAgICAgICAgICAgICAgICAgPE1lZGlhT2JqZWN0IHJlZj0iOjpyZWY6OiIgLz4NCiAgICAgICAgICAgICAgICAgICAgOjplbmQ6Og0KICAgICAgICAgICAgICAgIDwvUmVwcmVzZW50YXRpb24+DQogICAgICAgICAgICAgICAgOjppZihzdGF0ZXMubGVuZ3RoID4gMCk6Og0KICAgICAgICAgICAgICAgICAgICA8U3RhdGVzPg0KICAgICAgICAgICAgICAgICAgICA6OmZvcmVhY2ggc3RhdGVzOjoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0ZURlZmluaXRpb24gaWQ9Ijo6aWQ6OiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlcHJlc2VudGF0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+OjpsYWJlbDo6PC9MYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERldGFpbD4kJGh0bWwoOjpkZXRhaWw6Oik8L0RldGFpbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjpmb3JlYWNoIG1lZGlhT2JqZWN0c1JlZnM6Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWVkaWFPYmplY3QgcmVmPSI6OnJlZjo6IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmVuZDo6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SZXByZXNlbnRhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3RhdGVEZWZpbml0aW9uPg0KICAgICAgICAgICAgICAgICAgICA6OmVuZDo6DQogICAgICAgICAgICAgICAgICAgIDwvU3RhdGVzPg0KICAgICAgICAgICAgICAgIDo6ZW5kOjoNCiAgICAgICAgICAgIDwvQ2F0ZWdvcmljYWxDaGFyYWN0ZXI+DQogICAgICAgIDo6ZW5kOjoNCiAgICAgICAgPC9DaGFyYWN0ZXJzPg0KICAgICAgICA8Q2hhcmFjdGVyVHJlZXM+DQogICAgICAgICAgICA8Q2hhcmFjdGVyVHJlZSBpZD0iY3QxIj4NCiAgICAgICAgICAgICAgICA8UmVwcmVzZW50YXRpb24+DQogICAgICAgICAgICAgICAgICAgIDxMYWJlbD5PcmRyZSBldCBkZXBlbmRhbmNlIGVudHJlIGNhcmFjdGVyZXM8L0xhYmVsPg0KICAgICAgICAgICAgICAgIDwvUmVwcmVzZW50YXRpb24+DQogICAgICAgICAgICAgICAgPFNob3VsZENvbnRhaW5BbGxDaGFyYWN0ZXJzPnRydWU8L1Nob3VsZENvbnRhaW5BbGxDaGFyYWN0ZXJzPg0KICAgICAgICAgICAgICAgIDxOb2Rlcz4NCiAgICAgICAgICAgICAgICA6OmZvcmVhY2ggY2hhcmFjdGVyczo6DQogICAgICAgICAgICAgICAgICAgIDxDaGFyTm9kZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDo6aWYgKGluYXBwbGljYWJsZVN0YXRlc0lkcy5sZW5ndGggPiAwKTo6DQogICAgICAgICAgICAgICAgICAgICAgICA8RGVwZW5kZW5jeVJ1bGVzPg0KCQkJCQkJCTxJbmFwcGxpY2FibGVJZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmZvcmVhY2ggaW5hcHBsaWNhYmxlU3RhdGVzSWRzOjoNCgkJCQkJCQkJPFN0YXRlIHJlZj0iOjpyZWY6OiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmVuZDo6DQoJCQkJCQkJPC9JbmFwcGxpY2FibGVJZj4NCgkJCQkJCTwvRGVwZW5kZW5jeVJ1bGVzPg0KICAgICAgICAgICAgICAgICAgICAgICAgOjplbmQ6Og0KICAgICAgICAgICAgICAgICAgICAgICAgPENoYXJhY3RlciByZWY9Ijo6aWQ6OiIgLz4NCiAgICAgICAgICAgICAgICAgICAgPC9DaGFyTm9kZT4NCiAgICAgICAgICAgICAgICA6OmVuZDo6DQogICAgICAgICAgICAgICAgPC9Ob2Rlcz4NCiAgICAgICAgICAgIDwvQ2hhcmFjdGVyVHJlZT4NCiAgICAgICAgPC9DaGFyYWN0ZXJUcmVlcz4NCiAgICAgICAgPENvZGVkRGVzY3JpcHRpb25zPg0KICAgICAgICA6OmZvcmVhY2ggdGF4b25zOjoNCiAgICAgICAgICAgIDxDb2RlZERlc2NyaXB0aW9uIGlkPSJEMSI+DQogICAgICAgICAgICAgICAgPFJlcHJlc2VudGF0aW9uPg0KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+OjpsYWJlbDo6PC9MYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgPERldGFpbD4kJGh0bWwoOjpkZXRhaWw6Oik8L0RldGFpbD4NCiAgICAgICAgICAgICAgICAgICAgOjpmb3JlYWNoIG1lZGlhT2JqZWN0c1JlZnM6Og0KICAgICAgICAgICAgICAgICAgICA8TWVkaWFPYmplY3QgcmVmPSI6OnJlZjo6IiAvPg0KICAgICAgICAgICAgICAgICAgICA6OmVuZDo6DQogICAgICAgICAgICAgICAgPC9SZXByZXNlbnRhdGlvbj4NCiAgICAgICAgICAgICAgICA8U2NvcGU+DQogICAgICAgICAgICAgICAgICAgIDxUYXhvbk5hbWUgcmVmPSI6OmlkOjoiIC8+DQogICAgICAgICAgICAgICAgPC9TY29wZT4NCiAgICAgICAgICAgICAgICA6OmlmIChjYXRlZ29yaWNhbHMubGVuZ3RoID4gMCk6Og0KICAgICAgICAgICAgICAgIDxTdW1tYXJ5RGF0YT4NCiAgICAgICAgICAgICAgICA6OmZvcmVhY2ggY2F0ZWdvcmljYWxzOjoNCiAgICAgICAgICAgICAgICAgICAgPENhdGVnb3JpY2FsIHJlZj0iOjpyZWY6OiI+DQogICAgICAgICAgICAgICAgICAgIDo6Zm9yZWFjaCBzdGF0ZVJlZnM6Og0KICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXRlIHJlZj0iOjpyZWY6OiIgLz4NCiAgICAgICAgICAgICAgICAgICAgOjplbmQ6Og0KICAgICAgICAgICAgICAgICAgICA8L0NhdGVnb3JpY2FsPg0KICAgICAgICAgICAgICAgIDo6ZW5kOjoNCiAgICAgICAgICAgICAgICA8L1N1bW1hcnlEYXRhPg0KICAgICAgICAgICAgICAgIDo6ZW5kOjoNCiAgICAgICAgICAgIDwvQ29kZWREZXNjcmlwdGlvbj4NCiAgICAgICAgOjplbmQ6Og0KICAgICAgICA8L0NvZGVkRGVzY3JpcHRpb25zPg0KICAgICAgICA8TWVkaWFPYmplY3RzPg0KICAgICAgICA6OmZvcmVhY2ggbWVkaWFPYmplY3RzOjoNCiAgICAgICAgICAgIDxNZWRpYU9iamVjdCBpZD0iOjppZDo6Ij4NCiAgICAgICAgICAgICAgICA8UmVwcmVzZW50YXRpb24+DQogICAgICAgICAgICAgICAgICAgIDxMYWJlbD46OmxhYmVsOjo8L0xhYmVsPg0KICAgICAgICAgICAgICAgICAgICA8RGV0YWlsIHJvbGU9IkNhcHRpb24iPiQkaHRtbCg6OmRldGFpbDo6KTwvRGV0YWlsPg0KICAgICAgICAgICAgICAgIDwvUmVwcmVzZW50YXRpb24+DQogICAgICAgICAgICAgICAgPFR5cGU+SW1hZ2U8L1R5cGU+DQogICAgICAgICAgICAgICAgPFNvdXJjZSBocmVmPSI6OnNvdXJjZTo6IiAvPg0KICAgICAgICAgICAgPC9NZWRpYU9iamVjdD4NCiAgICAgICAgOjplbmQ6Og0KICAgICAgICA8L01lZGlhT2JqZWN0cz4NCiAgICA8L0RhdGFzZXQ+DQogICAgOjplbmQ6Og0KPC9EYXRhc2V0cz4"}];
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
bunga_Book.standard = [new bunga_Book("fmc","Flore de Madagascar et Comores"),new bunga_Book("mbf","Manuel de Botanique Forestière")];
bunga_Field.standard = [new bunga_Field(true,"name2","Syn"),new bunga_Field(true,"vernacularName","NV"),new bunga_Field(true,"vernacularName2","NV2"),new bunga_Field(true,"meaning","Sense"),new bunga_Field(true,"noHerbier","N° Herbier"),new bunga_Field(true,"herbariumPicture","Herbarium Picture"),new bunga_Field(true,"website","Website")];
bunga_FileNameGenerator.forbiddenChars = [" ","*",".","\"","/","\\","[","]",":",";","|",","];
bunga_ImageCache.DB_NAME = "ImageCache";
bunga_ImageCache.DB_VERSION = 1;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = new haxe_iterators_ArrayIterator([]);
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=SDD.js.map