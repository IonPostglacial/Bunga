// Generated by Haxe 4.1.2
(function ($hx_exports, $global) { "use strict";
$hx_exports["sdd"] = $hx_exports["sdd"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_message:"get_message"}
});
var haxe_Resource = function() { };
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw haxe_Exception.thrown("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
haxe_Template.__name__ = "haxe.Template";
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw haxe_Exception.thrown("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		var kwdEnd = function(kwd) {
			var pos = -1;
			var length = kwd.length;
			if(HxOverrides.substr(p,0,length) == kwd) {
				pos = length;
				var _g_offset = 0;
				var _g_s = HxOverrides.substr(p,length,null);
				while(_g_offset < _g_s.length) {
					var c = _g_s.charCodeAt(_g_offset++);
					if(c == 32) {
						++pos;
					} else {
						break;
					}
				}
			}
			return pos;
		};
		var pos = kwdEnd("if");
		if(pos > 0) {
			p = HxOverrides.substr(p,pos,p.length - pos);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t = tokens.first();
			var eelse;
			if(t == null) {
				throw haxe_Exception.thrown("Unclosed 'if'");
			}
			if(t.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t = tokens.pop();
				if(t == null || t.p != "end") {
					throw haxe_Exception.thrown("Unclosed 'else'");
				}
			} else {
				t.p = HxOverrides.substr(t.p,4,t.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		var pos = kwdEnd("foreach");
		if(pos >= 0) {
			p = HxOverrides.substr(p,pos,p.length - pos);
			var e = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t = tokens.pop();
			if(t == null || t.p != "end") {
				throw haxe_Exception.thrown("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			var _g_offset = 0;
			var _g_s = data;
			while(_g_offset < _g_s.length) {
				var _g1_key = _g_offset;
				var _g1_value = _g_s.charCodeAt(_g_offset++);
				var i = _g1_key;
				var c = _g1_value;
				if(c != 32) {
					l.add({ p : HxOverrides.substr(data,i,null), s : true});
					break;
				}
			}
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw haxe_Exception.thrown(l.first().p);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				var s = _g1;
				throw haxe_Exception.thrown("Unexpected '" + s + "' in " + expr);
			} else {
				throw _g;
			}
		}
		return function() {
			try {
				return e();
			} catch( _g ) {
				var exc = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Error : " + Std.string(exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw haxe_Exception.thrown(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,skipSpaces: function(l) {
		var p = l.first();
		while(p != null) {
			var _g_offset = 0;
			var _g_s = p.p;
			while(_g_offset < _g_s.length) {
				var c = _g_s.charCodeAt(_g_offset++);
				if(c != 32) {
					return;
				}
			}
			l.pop();
			p = l.first();
		}
	}
	,makeExpr2: function(l) {
		this.skipSpaces(l);
		var p = l.pop();
		this.skipSpaces(l);
		if(p == null) {
			throw haxe_Exception.thrown("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			this.skipSpaces(l);
			var e1 = this.makeExpr(l);
			this.skipSpaces(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw haxe_Exception.thrown(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			this.skipSpaces(l);
			var e2 = this.makeExpr(l);
			this.skipSpaces(l);
			var p2 = l.pop();
			this.skipSpaces(l);
			if(p2 == null || p2.p != ")") {
				throw haxe_Exception.thrown(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw haxe_Exception.thrown("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw haxe_Exception.thrown(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this = this.buf;
			var x = Std.string(e1());
			_this.b += Std.string(x);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e1 = e.expr;
			var v = e1();
			if(v == null || v == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e1 = val;
				this.run(e1);
			}
			break;
		case 5:
			var loop = e.loop;
			var e1 = e.expr;
			var v = e1();
			try {
				var x = $getIterator(v);
				if(x.hasNext == null) {
					throw haxe_Exception.thrown(null);
				}
				v = x;
			} catch( _g ) {
				try {
					if(v.hasNext == null) {
						throw haxe_Exception.thrown(null);
					}
				} catch( _g1 ) {
					throw haxe_Exception.thrown("Cannot iter on " + Std.string(v));
				}
			}
			this.stack.push(this.context);
			var v1 = v;
			var ctx = v1;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head = params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(p._hx_index == 0) {
					var v1 = p.v;
					pl.push(this.resolve(v1));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this = this.buf;
				var x = Std.string(v.apply(this.macros,pl));
				_this.b += Std.string(x);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( _g1 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e) + ")";
				throw haxe_Exception.thrown(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var sdd_CategoricalRef = function(ref,stateRefs) {
	this.ref = ref;
	this.stateRefs = stateRefs;
};
sdd_CategoricalRef.__name__ = "sdd.CategoricalRef";
sdd_CategoricalRef.prototype = {
	__class__: sdd_CategoricalRef
};
var sdd_Representation = function(label,detail,mediaObjectsRefs) {
	this.mediaObjectsRefs = [];
	this.label = label;
	this.detail = detail;
	if(mediaObjectsRefs != null) {
		this.mediaObjectsRefs = mediaObjectsRefs;
	}
};
sdd_Representation.__name__ = "sdd.Representation";
sdd_Representation.prototype = {
	__class__: sdd_Representation
};
var sdd_Character = function(id,representation,states) {
	this.childrenIds = [];
	this.inapplicableStatesRefs = [];
	this.states = [];
	sdd_Representation.call(this,representation.label,representation.detail,representation.mediaObjectsRefs);
	this.id = id;
	if(states != null) {
		this.states = states;
	}
};
sdd_Character.__name__ = "sdd.Character";
sdd_Character.__super__ = sdd_Representation;
sdd_Character.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_Character
});
var sdd_Dataset = function(taxons,characters,states,mediaObjects) {
	this.taxons = taxons;
	this.characters = characters;
	this.states = states;
	this.mediaObjects = mediaObjects;
};
sdd_Dataset.__name__ = "sdd.Dataset";
sdd_Dataset.prototype = {
	__class__: sdd_Dataset
};
var sdd_DetailData = $hx_exports["sdd"]["DetailData"] = function(name,nameCN,fasc,page,detail) {
	this.name = name;
	this.nameCN = nameCN;
	this.fasc = fasc;
	this.page = page;
	this.detail = detail;
	this.extra = { };
};
sdd_DetailData.__name__ = "sdd.DetailData";
sdd_DetailData.escapeRegExp = function(string) {
	var _this_r = new RegExp("[.*+?^${}()|[\\]\\\\]","g".split("u").join(""));
	return string.replace(_this_r,"\\$&");
};
sdd_DetailData.findInDescription = function(description,section) {
	var re = new EReg("" + sdd_DetailData.escapeRegExp(section) + "\\s*:\\s*(.*?)(?=<br><br>)","i");
	if(re.match(description)) {
		return StringTools.trim(re.matched(1));
	} else {
		return "";
	}
};
sdd_DetailData.removeFromDescription = function(description,sections) {
	var desc = description;
	var _g = 0;
	while(_g < sections.length) {
		var section = sections[_g];
		++_g;
		var re_r = new RegExp("" + sdd_DetailData.escapeRegExp(section) + "\\s*:\\s*(.*?)(?=<br><br>)","i".split("u").join(""));
		desc = desc.replace(re_r,"");
	}
	return desc;
};
sdd_DetailData.fromRepresentation = function(representation,extraFields) {
	var names = representation.label.split(" // ");
	var name = names[0];
	var nameCN = names[1];
	var fields = sdd_Field.standard.concat(extraFields);
	var floreRe = new EReg("Flore Madagascar et Comores\\s*<br>\\s*fasc\\s*(\\d*)\\s*<br>\\s*page\\s*(\\d*)","i");
	var fasc = null;
	var page = null;
	if(floreRe.match(representation.detail)) {
		fasc = Std.parseInt(floreRe.matched(1));
		page = Std.parseInt(floreRe.matched(2));
	}
	var representation1 = representation.detail;
	var result = new Array(fields.length);
	var _g = 0;
	var _g1 = fields.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = fields[i].label;
	}
	var detail = sdd_DetailData.removeFromDescription(representation1,result).replace(floreRe.r,"");
	var data = new sdd_DetailData(name,nameCN,fasc,page,detail);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		(field.std ? data : data.extra)[field.id] = sdd_DetailData.findInDescription(representation.detail,field.label);
	}
	return data;
};
sdd_DetailData.prototype = {
	__class__: sdd_DetailData
};
var sdd_Field = function(std,id,label) {
	this.std = std;
	this.id = id;
	this.label = label;
};
sdd_Field.__name__ = "sdd.Field";
sdd_Field.prototype = {
	__class__: sdd_Field
};
var sdd_TaxonHierarchy = function(taxon,childrenHierarchyIds) {
	this.taxon = taxon;
	this.childrenHierarchyIds = childrenHierarchyIds;
};
sdd_TaxonHierarchy.__name__ = "sdd.TaxonHierarchy";
sdd_TaxonHierarchy.prototype = {
	__class__: sdd_TaxonHierarchy
};
var sdd_CharactersAndStatesById = function(charactersById,statesById) {
	this.charactersById = charactersById;
	this.statesById = statesById;
};
sdd_CharactersAndStatesById.__name__ = "sdd.CharactersAndStatesById";
sdd_CharactersAndStatesById.prototype = {
	__class__: sdd_CharactersAndStatesById
};
var sdd_Loader = $hx_exports["sdd"]["Loader"] = function(strictMode) {
	if(strictMode == null) {
		strictMode = true;
	}
	this.exceptionLog = [];
	this.strictMode = strictMode;
};
sdd_Loader.__name__ = "sdd.Loader";
sdd_Loader.prototype = {
	loadDataset: function(datasetElement) {
		var mediaObjectsById = this.loadMediaObjects(datasetElement);
		var charsAndStatesById = this.loadDatasetCharacters(datasetElement,mediaObjectsById);
		return new sdd_Dataset(Lambda.array(this.loadDatasetTaxons(datasetElement,mediaObjectsById,charsAndStatesById.charactersById)),Lambda.array(charsAndStatesById.charactersById),Lambda.array(charsAndStatesById.statesById),Lambda.array(mediaObjectsById));
	}
	,loadMediaObjects: function(datasetElement) {
		var mediaObjectsElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"MediaObjects");
		var mediaObjectsById = new haxe_ds_StringMap();
		if(mediaObjectsElement == null) {
			return mediaObjectsById;
		}
		var mediaObjectElement = mediaObjectsElement.elementsNamed("MediaObject");
		while(mediaObjectElement.hasNext()) {
			var mediaObjectElement1 = mediaObjectElement.next();
			var sourceElement = sdd_XmlExtensions.firstElementNamed(mediaObjectElement1,"Source");
			if(sourceElement != null) {
				var value = mediaObjectElement1.get("id");
				var exception = new sdd_SddException("A MediaObject declaration misses its 'id'.");
				if(value == null) {
					throw haxe_Exception.thrown(exception);
				}
				var id = value;
				var representation = this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(mediaObjectElement1,"Representation"),mediaObjectsById);
				var value1 = new sdd_MediaObject(sourceElement.get("href"),representation.label,representation.detail);
				mediaObjectsById.h[id] = value1;
			}
		}
		return mediaObjectsById;
	}
	,loadRepresentation: function(representationElement,mediaObjectsByRef) {
		if(representationElement == null) {
			return new sdd_Representation("","",[]);
		}
		var mediaObjectsRefs = [];
		var mediaObjectElement = representationElement.elementsNamed("MediaObject");
		while(mediaObjectElement.hasNext()) {
			var mediaObjectElement1 = mediaObjectElement.next();
			var value = mediaObjectElement1.get("ref");
			var exception = new sdd_SddException("A MediaObject is missing its ref.");
			if(value == null) {
				throw haxe_Exception.thrown(exception);
			}
			mediaObjectsRefs.push(new sdd_MediaObjectRef(value));
		}
		var labelNode = sdd_XmlExtensions.firstElementNamed(representationElement,"Label");
		var detailElement = sdd_XmlExtensions.firstElementNamed(representationElement,"Detail");
		return new sdd_Representation(labelNode != null ? sdd_XmlExtensions.innerText(labelNode) : "_",detailElement != null ? sdd_XmlExtensions.innerText(detailElement) : "_",mediaObjectsRefs);
	}
	,logException: function(exception) {
		this.exceptionLog.push(exception.get_message());
	}
	,assertNotNull: function(value,exception) {
		if(value == null) {
			throw haxe_Exception.thrown(exception);
		}
		return value;
	}
	,loadDatasetTaxons: function(datasetElement,mediaObjectsById,charactersById) {
		var taxonsById = new haxe_ds_StringMap();
		var taxonNamesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"TaxonNames");
		if(taxonNamesElement == null) {
			return new haxe_ds_StringMap();
		}
		var taxonElement = taxonNamesElement.elementsNamed("TaxonName");
		while(taxonElement.hasNext()) {
			var taxonElement1 = taxonElement.next();
			var value = taxonElement1.get("id");
			var exception = new sdd_SddException("A Taxon is missing its 'id'.");
			if(value == null) {
				throw haxe_Exception.thrown(exception);
			}
			var taxonId = value;
			var value1 = new sdd_Taxon(taxonId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(taxonElement1,"Representation"),mediaObjectsById));
			taxonsById.h[taxonId] = value1;
		}
		var codedDescriptionsElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"CodedDescriptions");
		if(codedDescriptionsElement != null) {
			var codedDescriptionElement = codedDescriptionsElement.elementsNamed("CodedDescription");
			while(codedDescriptionElement.hasNext()) {
				var codedDescriptionElement1 = codedDescriptionElement.next();
				try {
					var value = sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"Scope");
					var exception = new sdd_SddException("A CodedDescription is missing its 'Scope'.");
					if(value == null) {
						throw haxe_Exception.thrown(exception);
					}
					var scopeElement = value;
					var value1 = sdd_XmlExtensions.firstElementNamed(scopeElement,"TaxonName");
					var exception1 = new sdd_SddException("A CodedDescription Scope doesn't have a 'Taxon' element, which is the only one supported by this loader.");
					if(value1 == null) {
						throw haxe_Exception.thrown(exception1);
					}
					var taxonNameElement = value1;
					var value2 = taxonNameElement.get("ref");
					var exception2 = new sdd_SddException("A TaxonName is missing its 'ref'.");
					if(value2 == null) {
						throw haxe_Exception.thrown(exception2);
					}
					var taxonId = value2;
					var representation = this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"Representation"),mediaObjectsById);
					var value3 = taxonsById.h[taxonId];
					var exception3 = new sdd_SddRefException("Scope > TaxonName","Taxon",taxonId);
					if(value3 == null) {
						throw haxe_Exception.thrown(exception3);
					}
					var taxonToAugment = value3;
					if(representation != null) {
						var s = representation.label;
						if(!(s == null || s == "")) {
							taxonToAugment.label = representation.label;
						}
						var s1 = representation.detail;
						if(!(s1 == null || s1 == "")) {
							taxonToAugment.detail = representation.detail;
						}
						if(representation.mediaObjectsRefs != null && representation.mediaObjectsRefs.length > 0) {
							taxonToAugment.mediaObjectsRefs = representation.mediaObjectsRefs;
						}
					}
					var summaryDataElement = sdd_XmlExtensions.firstElementNamed(codedDescriptionElement1,"SummaryData");
					if(summaryDataElement != null) {
						var categoricalElements = summaryDataElement.elementsNamed("Categorical");
						var categoricalElement = categoricalElements;
						while(categoricalElement.hasNext()) {
							var categoricalElement1 = categoricalElement.next();
							var value4 = categoricalElement1.get("ref");
							var exception4 = new sdd_SddException("A Categorical is missing its 'ref'.");
							if(value4 == null) {
								throw haxe_Exception.thrown(exception4);
							}
							var categorical = new sdd_CategoricalRef(value4,[]);
							var stateElement = categoricalElement1.elementsNamed("State");
							while(stateElement.hasNext()) {
								var stateElement1 = stateElement.next();
								var value5 = stateElement1.get("ref");
								var exception5 = new sdd_SddException("A State is missing its 'ref'.");
								if(value5 == null) {
									throw haxe_Exception.thrown(exception5);
								}
								var stateId = value5;
								categorical.stateRefs.push(new sdd_StateRef(stateId));
							}
							taxonToAugment.categoricals.push(categorical);
						}
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g);
					if(((_g1) instanceof sdd_SddException)) {
						var e = _g1;
						if(this.strictMode) {
							throw e;
						} else {
							this.logException(e);
						}
					} else {
						throw _g;
					}
				}
			}
		}
		var taxonHierarchiesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"TaxonHierarchies");
		var taxonHierarchyElement = taxonHierarchiesElement != null ? sdd_XmlExtensions.firstElementNamed(taxonHierarchiesElement,"TaxonHierarchy") : null;
		var nodesElement = taxonHierarchyElement != null ? sdd_XmlExtensions.firstElementNamed(taxonHierarchyElement,"Nodes") : null;
		if(nodesElement != null) {
			var hierarchiesById_h = Object.create(null);
			var nodeElement = nodesElement.elementsNamed("Node");
			while(nodeElement.hasNext()) {
				var nodeElement1 = nodeElement.next();
				try {
					var value = nodeElement1.get("id");
					var exception = new sdd_SddException("A TaxonHierarchy > Nodes > Node is missing its 'id'.");
					if(value == null) {
						throw haxe_Exception.thrown(exception);
					}
					var hierarchyId = value;
					var value1 = sdd_XmlExtensions.firstElementNamed(nodeElement1,"TaxonName");
					var exception1 = new sdd_SddException("A TaxonHierarchy > Nodes > Node is missing its 'TaxonName'.");
					if(value1 == null) {
						throw haxe_Exception.thrown(exception1);
					}
					var taxonNameElement = value1;
					var value2 = taxonNameElement.get("ref");
					var exception2 = new sdd_SddException("A TaxonHierarchy > Nodes > Node > TaxonName is missing its 'ref'.");
					if(value2 == null) {
						throw haxe_Exception.thrown(exception2);
					}
					var taxonId = value2;
					var value3 = taxonsById.h[taxonId];
					var exception3 = new sdd_SddRefException("TaxonHierarchy > Nodes > Node > TaxonName","Taxons",taxonId);
					if(value3 == null) {
						throw haxe_Exception.thrown(exception3);
					}
					var taxon = value3;
					var hierarchy = hierarchiesById_h[hierarchyId];
					taxon.hid = hierarchyId;
					if(hierarchy == null) {
						hierarchy = new sdd_TaxonHierarchy(taxon,[]);
					} else {
						hierarchy.taxon = taxon;
					}
					hierarchiesById_h[hierarchyId] = hierarchy;
					var parentElement = sdd_XmlExtensions.firstElementNamed(nodeElement1,"Parent");
					if(parentElement != null) {
						var value4 = parentElement.get("ref");
						var exception4 = new sdd_SddException("A TaxonHierarchy >> Parent is missing its 'ref'.");
						if(value4 == null) {
							throw haxe_Exception.thrown(exception4);
						}
						var parentId = value4;
						var parent = hierarchiesById_h[parentId];
						if(parent == null) {
							parent = new sdd_TaxonHierarchy(null,[hierarchyId]);
							hierarchiesById_h[parentId] = parent;
						} else {
							parent.childrenHierarchyIds.push(hierarchyId);
						}
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g);
					if(((_g1) instanceof sdd_SddException)) {
						var e = _g1;
						if(this.strictMode) {
							throw e;
						} else {
							this.logException(e);
						}
					} else {
						throw _g;
					}
				}
			}
			var hierarchy = haxe_ds_StringMap.valueIterator(hierarchiesById_h);
			while(hierarchy.hasNext()) {
				var hierarchy1 = hierarchy.next();
				var augmentedTaxon = hierarchy1.taxon;
				var _g = 0;
				var _g1 = hierarchy1.childrenHierarchyIds;
				while(_g < _g1.length) {
					var hid = _g1[_g];
					++_g;
					var child = hierarchiesById_h[hid].taxon;
					child.parentId = augmentedTaxon.id;
					augmentedTaxon.childrenIds.push(child.id);
				}
			}
		}
		return taxonsById;
	}
	,loadDatasetCharacters: function(datasetElement,mediaObjectsById) {
		var charactersById = new haxe_ds_StringMap();
		var charactersElements = sdd_XmlExtensions.firstElementNamed(datasetElement,"Characters");
		var statesById = new haxe_ds_StringMap();
		if(charactersElements == null) {
			return new sdd_CharactersAndStatesById(charactersById,statesById);
		}
		var characterElement = charactersElements.elements();
		while(characterElement.hasNext()) {
			var characterElement1 = characterElement.next();
			try {
				var tmp;
				if(characterElement1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (characterElement1.nodeType == null ? "null" : XmlType.toString(characterElement1.nodeType)));
				}
				if(characterElement1.nodeName != "CategoricalCharacter") {
					if(characterElement1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (characterElement1.nodeType == null ? "null" : XmlType.toString(characterElement1.nodeType)));
					}
					tmp = characterElement1.nodeName != "QuantitativeCharacter";
				} else {
					tmp = false;
				}
				if(tmp) {
					continue;
				}
				var value = characterElement1.get("id");
				var exception = new sdd_SddException("A Character is missing its 'id'.");
				if(value == null) {
					throw haxe_Exception.thrown(exception);
				}
				var characterId = value;
				var statesElement = sdd_XmlExtensions.firstElementNamed(characterElement1,"States");
				var states = [];
				if(statesElement != null) {
					var stateElement = statesElement.elementsNamed("StateDefinition");
					while(stateElement.hasNext()) {
						var stateElement1 = stateElement.next();
						var value1 = stateElement1.get("id");
						var exception1 = new sdd_SddException("A State is missing its 'id'");
						if(value1 == null) {
							throw haxe_Exception.thrown(exception1);
						}
						var stateId = value1;
						var state = new sdd_State(stateId,characterId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(stateElement1,"Representation"),mediaObjectsById));
						statesById.h[stateId] = state;
						states.push(state);
					}
				}
				var value2 = new sdd_Character(characterId,this.loadRepresentation(sdd_XmlExtensions.firstElementNamed(characterElement1,"Representation"),mediaObjectsById),states);
				charactersById.h[characterId] = value2;
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				if(((_g1) instanceof sdd_SddException)) {
					var e = _g1;
					if(this.strictMode) {
						throw e;
					} else {
						this.logException(e);
					}
				} else {
					throw _g;
				}
			}
		}
		var characterTreesElement = sdd_XmlExtensions.firstElementNamed(datasetElement,"CharacterTrees");
		if(characterTreesElement != null) {
			var characterTreeElement = characterTreesElement.elementsNamed("CharacterTree");
			while(characterTreeElement.hasNext()) {
				var characterTreeElement1 = characterTreeElement.next();
				var nodesElement = sdd_XmlExtensions.firstElementNamed(characterTreeElement1,"Nodes");
				if(nodesElement != null) {
					var charNodeElement = nodesElement.elementsNamed("CharNode");
					while(charNodeElement.hasNext()) {
						var charNodeElement1 = charNodeElement.next();
						try {
							var value = sdd_XmlExtensions.firstElementNamed(charNodeElement1,"Character");
							var exception = new sdd_SddException("A CharNode is missing its 'Character'.");
							if(value == null) {
								throw haxe_Exception.thrown(exception);
							}
							var characterElement = value;
							var value1 = characterElement.get("ref");
							var exception1 = new sdd_SddException("A CharNode > Character is missing its 'ref.");
							if(value1 == null) {
								throw haxe_Exception.thrown(exception1);
							}
							var characterRef = value1;
							var value2 = charactersById.h[characterRef];
							var exception2 = new sdd_SddRefException("CharNode > Character","Character",characterRef);
							if(value2 == null) {
								throw haxe_Exception.thrown(exception2);
							}
							var augmentedCharacter = value2;
							var dependencyRulesElement = sdd_XmlExtensions.firstElementNamed(charNodeElement1,"DependencyRules");
							if(dependencyRulesElement != null) {
								var inapplicableIfElement = sdd_XmlExtensions.firstElementNamed(dependencyRulesElement,"InapplicableIf");
								if(inapplicableIfElement != null) {
									var stateElement = inapplicableIfElement.elementsNamed("State");
									while(stateElement.hasNext()) {
										var stateElement1 = stateElement.next();
										var value3 = stateElement1.get("ref");
										var exception3 = new sdd_SddException("A InapplicableIf > State is missing its 'ref'.");
										if(value3 == null) {
											throw haxe_Exception.thrown(exception3);
										}
										var stateRef = value3;
										var value4 = statesById.h[stateRef];
										var exception4 = new sdd_SddRefException("InapplicableIf > State","State",stateRef);
										if(value4 == null) {
											throw haxe_Exception.thrown(exception4);
										}
										var state = value4;
										augmentedCharacter.inapplicableStatesRefs.push(new sdd_StateRef(state.id));
										augmentedCharacter.parentId = state.characterId;
									}
								}
							}
							if(augmentedCharacter.inapplicableStatesRefs.length > 0) {
								charactersById.h[augmentedCharacter.parentId].childrenIds.push(augmentedCharacter.id);
							}
						} catch( _g ) {
							var _g1 = haxe_Exception.caught(_g);
							if(((_g1) instanceof sdd_SddException)) {
								var e = _g1;
								if(this.strictMode) {
									throw e;
								} else {
									this.logException(e);
								}
							} else {
								throw _g;
							}
						}
					}
				}
			}
		}
		return new sdd_CharactersAndStatesById(charactersById,statesById);
	}
	,load: function(text) {
		var xml = Xml.parse(text);
		var datasetsElements = xml.firstElement();
		var datasets = [];
		var datasetElement = datasetsElements.elementsNamed("Dataset");
		while(datasetElement.hasNext()) {
			var datasetElement1 = datasetElement.next();
			datasets.push(this.loadDataset(datasetElement1));
		}
		return datasets;
	}
	,__class__: sdd_Loader
};
var sdd_MediaObject = function(source,label,detail) {
	this.source = source;
	this.label = label;
	this.detail = detail;
};
sdd_MediaObject.__name__ = "sdd.MediaObject";
sdd_MediaObject.prototype = {
	__class__: sdd_MediaObject
};
var sdd_MediaObjectRef = function(ref) {
	this.ref = ref;
};
sdd_MediaObjectRef.__name__ = "sdd.MediaObjectRef";
sdd_MediaObjectRef.prototype = {
	__class__: sdd_MediaObjectRef
};
var sdd_Saver = $hx_exports["sdd"]["Saver"] = function(datasets) {
	this.mediaObjectsCount = 0;
	this.datasets = datasets;
};
sdd_Saver.__name__ = "sdd.Saver";
sdd_Saver.prototype = {
	taxonParentHid: function(resolve,parentId) {
		return "";
	}
	,save: function() {
		var sddTemplate = haxe_Resource.getString("sdd_template");
		var template = new haxe_Template(sddTemplate);
		return template.execute({ datasets : this.datasets},this);
	}
	,__class__: sdd_Saver
};
var sdd_SddException = function(message) {
	haxe_Exception.call(this,"Invalid SDD: " + message);
};
sdd_SddException.__name__ = "sdd.SddException";
sdd_SddException.__super__ = haxe_Exception;
sdd_SddException.prototype = $extend(haxe_Exception.prototype,{
	__class__: sdd_SddException
});
var sdd_SddRefException = function(sourceElement,targetElement,ref) {
	sdd_SddException.call(this,"A '" + sourceElement + "' references a missing '" + targetElement + "': " + ref);
};
sdd_SddRefException.__name__ = "sdd.SddRefException";
sdd_SddRefException.__super__ = sdd_SddException;
sdd_SddRefException.prototype = $extend(sdd_SddException.prototype,{
	__class__: sdd_SddRefException
});
var sdd_State = function(id,characterId,representation) {
	sdd_Representation.call(this,representation.label,representation.detail,representation.mediaObjectsRefs);
	this.id = id;
	this.characterId = characterId;
};
sdd_State.__name__ = "sdd.State";
sdd_State.__super__ = sdd_Representation;
sdd_State.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_State
});
var sdd_StateRef = function(ref) {
	this.ref = ref;
};
sdd_StateRef.__name__ = "sdd.StateRef";
sdd_StateRef.prototype = {
	__class__: sdd_StateRef
};
var sdd_Taxon = function(id,representation,childrenIds,categoricals) {
	this.childrenIds = [];
	this.categoricals = [];
	sdd_Representation.call(this,representation.label,representation.detail,representation.mediaObjectsRefs);
	this.id = id;
	if(childrenIds != null) {
		this.childrenIds = childrenIds;
	}
	if(categoricals != null) {
		this.categoricals = categoricals;
	}
};
sdd_Taxon.__name__ = "sdd.Taxon";
sdd_Taxon.__super__ = sdd_Representation;
sdd_Taxon.prototype = $extend(sdd_Representation.prototype,{
	__class__: sdd_Taxon
});
var sdd_XmlExtensions = function() { };
sdd_XmlExtensions.__name__ = "sdd.XmlExtensions";
sdd_XmlExtensions.firstElementNamed = function(xml,tagName) {
	if(xml != null) {
		return xml.elementsNamed(tagName).next();
	} else {
		return null;
	}
};
sdd_XmlExtensions.innerText = function(xml) {
	if(xml == null) {
		return "";
	}
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var textNode = xml.children[0];
	if(textNode != null) {
		if(textNode.nodeType == Xml.Document || textNode.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (textNode.nodeType == null ? "null" : XmlType.toString(textNode.nodeType)));
		}
		return textNode.nodeValue;
	} else {
		return "";
	}
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
haxe_Resource.content = [{ name : "sdd_template", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPERhdGFzZXRzIHhtbG5zPSJodHRwOi8vcnMudGR3Zy5vcmcvVUJJRi8yMDA2LyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vcnMudGR3Zy5vcmcvVUJJRi8yMDA2LyBodHRwOi8vcnMudGR3Zy5vcmcvVUJJRi8yMDA2L1NjaGVtYS8xLjEvU0RELnhzZCI+Cgk8VGVjaG5pY2FsTWV0YWRhdGEgY3JlYXRlZD0iMjAyMC0wNC0yNFQxMjoxMToxNSI+CgkJPEdlbmVyYXRvciBuYW1lPSJYcGVyMyIgbm90ZXM9IlRoaXMgc29mdHdhcmUgaXMgZGV2ZWxvcGVkIGJ5IExJUyAtIExhYm9yYXRvcnkgb2YgSW5mb3JtYXRpY3MgYW5kIFN5c3RlbWF0aWNzIChVbml2ZXJzaXTDg8KpIFBpZXJyZSBldCBNYXJpZSBDdXJpZSwgVU1SIDcyMDUsIEZyYW5jZSkgLSB3d3cuaW5mb3N5c2xhYi5mciIgdmVyc2lvbj0iMS41LjEiIC8+Cgk8L1RlY2huaWNhbE1ldGFkYXRhPgogICAgOjpmb3JlYWNoIGRhdGFzZXRzOjoKICAgIDxEYXRhc2V0IHhtbG5zPSIiIHhtbDpsYW5nPSJmciI+CiAgICAgICAgPFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8TGFiZWw+U2FtcGxlPC9MYWJlbD4KICAgICAgICA8L1JlcHJlc2VudGF0aW9uPgogICAgICAgIDxUYXhvbk5hbWVzPgogICAgICAgICAgICA6OmZvcmVhY2ggdGF4b25zOjoKICAgICAgICAgICAgPFRheG9uTmFtZSBpZD0iOjppZDo6Ij4KICAgICAgICAgICAgICAgIDxSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+OjpsYWJlbDo6PC9MYWJlbD4KICAgICAgICAgICAgICAgICAgICA8RGV0YWlsPjo6ZGV0YWlsOjo8L0RldGFpbD4KICAgICAgICAgICAgICAgICAgICA6OmZvcmVhY2ggbWVkaWFPYmplY3RzUmVmczo6CiAgICAgICAgICAgICAgICAgICAgPE1lZGlhT2JqZWN0IHJlZj0iOjpyZWY6OiIgLz4KICAgICAgICAgICAgICAgICAgICA6OmVuZDo6CiAgICAgICAgICAgICAgICA8L1JlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8L1RheG9uTmFtZT4KICAgICAgICAgICAgOjplbmQ6OgogICAgICAgIDwvVGF4b25OYW1lcz4KICAgICAgICA8VGF4b25IaWVyYXJjaGllcz4KICAgICAgICAgICAgPFRheG9uSGllcmFyY2h5IGlkPSJ0aDEiPgogICAgICAgICAgICAgICAgPFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxMYWJlbD5EZWZhdWx0IEVudGl0eSBUcmVlPC9MYWJlbD4KICAgICAgICAgICAgICAgIDwvUmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8VGF4b25IaWVyYXJjaHlUeXBlPlVuc3BlY2lmaWVkVGF4b25vbXk8L1RheG9uSGllcmFyY2h5VHlwZT4KICAgICAgICAgICAgICAgIDxOb2Rlcz4KICAgICAgICAgICAgICAgIDo6Zm9yZWFjaCB0YXhvbnM6OgogICAgICAgICAgICAgICAgICAgIDxOb2RlIGlkPSI6OmhpZDo6Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmVudCByZWY9IiQkdGF4b25QYXJlbnRIaWQoOjpwYXJlbnRJZDo6KSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPFRheG9uTmFtZSByZWY9Ijo6aWQ6OiIgLz4KICAgICAgICAgICAgICAgICAgICA8L05vZGU+CiAgICAgICAgICAgICAgICA6OmVuZDo6CiAgICAgICAgICAgICAgICA8L05vZGVzPgogICAgICAgICAgICA8L1RheG9uSGllcmFyY2h5PgogICAgICAgIDwvVGF4b25IaWVyYXJjaGllcz4KICAgICAgICA8Q2hhcmFjdGVycz4KICAgICAgICA6OmZvcmVhY2ggY2hhcmFjdGVyczo6CiAgICAgICAgICAgIDxDYXRlZ29yaWNhbENoYXJhY3RlciBpZD0iOjppZDo6Ij4KICAgICAgICAgICAgICAgIDxSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+OjpsYWJlbDo6PC9MYWJlbD4KICAgICAgICAgICAgICAgICAgICA8RGV0YWlsPjo6ZGV0YWlsOjo8L0RldGFpbD4KICAgICAgICAgICAgICAgICAgICA6OmZvcmVhY2ggbWVkaWFPYmplY3RzUmVmczo6CiAgICAgICAgICAgICAgICAgICAgPE1lZGlhT2JqZWN0IHJlZj0iOjpyZWY6OiIgLz4KICAgICAgICAgICAgICAgICAgICA6OmVuZDo6CiAgICAgICAgICAgICAgICA8L1JlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgOjppZihzdGF0ZXMubGVuZ3RoID4gMCk6OgogICAgICAgICAgICAgICAgICAgIDxTdGF0ZXM+CiAgICAgICAgICAgICAgICAgICAgOjpmb3JlYWNoIHN0YXRlczo6CiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0ZURlZmluaXRpb24gaWQ9Ijo6aWQ6OiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPjo6bGFiZWw6OjwvTGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERldGFpbD46OmRldGFpbDo6PC9EZXRhaWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjpmb3JlYWNoIG1lZGlhT2JqZWN0c1JlZnM6OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZWRpYU9iamVjdCByZWY9Ijo6cmVmOjoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjplbmQ6OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9TdGF0ZURlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgOjplbmQ6OgogICAgICAgICAgICAgICAgICAgIDwvU3RhdGVzPgogICAgICAgICAgICAgICAgOjplbmQ6OgogICAgICAgICAgICA8L0NhdGVnb3JpY2FsQ2hhcmFjdGVyPgogICAgICAgIDo6ZW5kOjoKICAgICAgICA8L0NoYXJhY3RlcnM+CiAgICAgICAgPENoYXJhY3RlclRyZWVzPgogICAgICAgICAgICA8Q2hhcmFjdGVyVHJlZSBpZD0iY3QxIj4KICAgICAgICAgICAgICAgIDxSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+T3JkcmUgZXQgZGVwZW5kYW5jZSBlbnRyZSBjYXJhY3RlcmVzPC9MYWJlbD4KICAgICAgICAgICAgICAgIDwvUmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8U2hvdWxkQ29udGFpbkFsbENoYXJhY3RlcnM+dHJ1ZTwvU2hvdWxkQ29udGFpbkFsbENoYXJhY3RlcnM+CiAgICAgICAgICAgICAgICA8Tm9kZXM+CiAgICAgICAgICAgICAgICA6OmZvcmVhY2ggY2hhcmFjdGVyczo6CiAgICAgICAgICAgICAgICAgICAgPENoYXJOb2RlPgogICAgICAgICAgICAgICAgICAgICAgICA6OmlmIChpbmFwcGxpY2FibGVTdGF0ZXNJZHMubGVuZ3RoID4gMCk6OgogICAgICAgICAgICAgICAgICAgICAgICA8RGVwZW5kZW5jeVJ1bGVzPgoJCQkJCQkJPEluYXBwbGljYWJsZUlmPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOjpmb3JlYWNoIGluYXBwbGljYWJsZVN0YXRlc0lkczo6CgkJCQkJCQkJPFN0YXRlIHJlZj0iOjpyZWY6OiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6ZW5kOjoKCQkJCQkJCTwvSW5hcHBsaWNhYmxlSWY+CgkJCQkJCTwvRGVwZW5kZW5jeVJ1bGVzPgogICAgICAgICAgICAgICAgICAgICAgICA6OmVuZDo6CiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGFyYWN0ZXIgcmVmPSI6OmlkOjoiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9DaGFyTm9kZT4KICAgICAgICAgICAgICAgIDo6ZW5kOjoKICAgICAgICAgICAgICAgIDwvTm9kZXM+CiAgICAgICAgICAgIDwvQ2hhcmFjdGVyVHJlZT4KICAgICAgICA8L0NoYXJhY3RlclRyZWVzPgogICAgICAgIDxDb2RlZERlc2NyaXB0aW9ucz4KICAgICAgICA6OmZvcmVhY2ggdGF4b25zOjoKICAgICAgICAgICAgPENvZGVkRGVzY3JpcHRpb24gaWQ9IkQxIj4KICAgICAgICAgICAgICAgIDxSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+OjpsYWJlbDo6PC9MYWJlbD4KICAgICAgICAgICAgICAgICAgICA8RGV0YWlsPjo6ZGV0YWlsOjo8L0RldGFpbD4KICAgICAgICAgICAgICAgICAgICA6OmZvcmVhY2ggbWVkaWFPYmplY3RzUmVmczo6CiAgICAgICAgICAgICAgICAgICAgPE1lZGlhT2JqZWN0IHJlZj0iOjpyZWY6OiIgLz4KICAgICAgICAgICAgICAgICAgICA6OmVuZDo6CiAgICAgICAgICAgICAgICA8L1JlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPFNjb3BlPgogICAgICAgICAgICAgICAgICAgIDxUYXhvbk5hbWUgcmVmPSI6OmlkOjoiIC8+CiAgICAgICAgICAgICAgICA8L1Njb3BlPgogICAgICAgICAgICAgICAgOjppZiAoY2F0ZWdvcmljYWxzLmxlbmd0aCA+IDApOjoKICAgICAgICAgICAgICAgIDxTdW1tYXJ5RGF0YT4KICAgICAgICAgICAgICAgIDo6Zm9yZWFjaCBjYXRlZ29yaWNhbHM6OgogICAgICAgICAgICAgICAgICAgIDxDYXRlZ29yaWNhbCByZWY9Ijo6cmVmOjoiPgogICAgICAgICAgICAgICAgICAgIDo6Zm9yZWFjaCBzdGF0ZVJlZnM6OgogICAgICAgICAgICAgICAgICAgICAgICA8U3RhdGUgcmVmPSI6OnJlZjo6IiAvPgogICAgICAgICAgICAgICAgICAgIDo6ZW5kOjoKICAgICAgICAgICAgICAgICAgICA8L0NhdGVnb3JpY2FsPgogICAgICAgICAgICAgICAgOjplbmQ6OgogICAgICAgICAgICAgICAgPC9TdW1tYXJ5RGF0YT4KICAgICAgICAgICAgICAgIDo6ZW5kOjoKICAgICAgICAgICAgPC9Db2RlZERlc2NyaXB0aW9uPgogICAgICAgIDo6ZW5kOjoKICAgICAgICA8L0NvZGVkRGVzY3JpcHRpb25zPgogICAgICAgIDxNZWRpYU9iamVjdHM+CiAgICAgICAgOjpmb3JlYWNoIG1lZGlhT2JqZWN0czo6CiAgICAgICAgICAgIDxNZWRpYU9iamVjdCBpZD0iOjppZDo6Ij4KICAgICAgICAgICAgICAgIDxSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+OjpsYWJlbDo6PC9MYWJlbD4KICAgICAgICAgICAgICAgICAgICA8RGV0YWlsIHJvbGU9IkNhcHRpb24iPjo6ZGV0YWlsOjo8L0RldGFpbD4KICAgICAgICAgICAgICAgIDwvUmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8VHlwZT5JbWFnZTwvVHlwZT4KICAgICAgICAgICAgICAgIDxTb3VyY2UgaHJlZj0iOjpzb3VyY2U6OiIgLz4KICAgICAgICAgICAgPC9NZWRpYU9iamVjdD4KICAgICAgICA6OmVuZDo6CiAgICAgICAgPC9NZWRpYU9iamVjdHM+CiAgICA8L0RhdGFzZXQ+CiAgICA6OmVuZDo6CjwvRGF0YXNldHM+"}];
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = new haxe_iterators_ArrayIterator([]);
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
sdd_Field.standard = [new sdd_Field(true,"author","Author"),new sdd_Field(true,"name2","Syn"),new sdd_Field(true,"vernacularName","NV"),new sdd_Field(true,"vernacularName2","NV2"),new sdd_Field(true,"meaning","Sense"),new sdd_Field(true,"noHerbier","N° Herbier"),new sdd_Field(true,"herbariumPicture","Herbarium Picture"),new sdd_Field(true,"website","Website")];
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=SDD.js.map